# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:30:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessTokens(BaseModel):
    appId: Optional[str] = Field(
        None,
        description='The identifier of the application for which the access token is generated.<br><br><b>Endpoints</b>:<ul><li>GET user/accessTokens</li></ul>',
    )
    url: Optional[str] = Field(
        None,
        description='Base URL using which the application is accessed.<br><br><b>Endpoints</b>:<ul><li>GET user/accessTokens</li></ul>',
    )
    value: Optional[str] = Field(
        None,
        description='Access token value used to invoke the widgets/apps.<br><br><b>Endpoints</b>:<ul><li>GET user/accessTokens</li></ul>',
    )


class CONTAINER(Enum):
    bank = 'bank'
    creditCard = 'creditCard'
    investment = 'investment'
    insurance = 'insurance'
    loan = 'loan'
    reward = 'reward'
    realEstate = 'realEstate'
    otherAssets = 'otherAssets'
    otherLiabilities = 'otherLiabilities'


class AccountStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    TO_BE_CLOSED = 'TO_BE_CLOSED'
    CLOSED = 'CLOSED'
    DELETED = 'DELETED'


class AggregationSource(Enum):
    SYSTEM = 'SYSTEM'
    USER = 'USER'


class Classification(Enum):
    OTHER = 'OTHER'
    PERSONAL = 'PERSONAL'
    CORPORATE = 'CORPORATE'
    SMALL_BUSINESS = 'SMALL_BUSINESS'
    TRUST = 'TRUST'
    ADD_ON_CARD = 'ADD_ON_CARD'
    VIRTUAL_CARD = 'VIRTUAL_CARD'


class Frequency(Enum):
    DAILY = 'DAILY'
    ONE_TIME = 'ONE_TIME'
    WEEKLY = 'WEEKLY'
    EVERY_2_WEEKS = 'EVERY_2_WEEKS'
    SEMI_MONTHLY = 'SEMI_MONTHLY'
    MONTHLY = 'MONTHLY'
    QUARTERLY = 'QUARTERLY'
    SEMI_ANNUALLY = 'SEMI_ANNUALLY'
    ANNUALLY = 'ANNUALLY'
    EVERY_2_MONTHS = 'EVERY_2_MONTHS'
    EBILL = 'EBILL'
    FIRST_DAY_MONTHLY = 'FIRST_DAY_MONTHLY'
    LAST_DAY_MONTHLY = 'LAST_DAY_MONTHLY'
    EVERY_4_WEEKS = 'EVERY_4_WEEKS'
    UNKNOWN = 'UNKNOWN'
    OTHER = 'OTHER'


class HomeInsuranceType(Enum):
    HOME_OWNER = 'HOME_OWNER'
    RENTAL = 'RENTAL'
    RENTER = 'RENTER'
    UNKNOWN = 'UNKNOWN'
    OTHER = 'OTHER'


class InterestRateType(Enum):
    FIXED = 'FIXED'
    VARIABLE = 'VARIABLE'
    UNKNOWN = 'UNKNOWN'
    OTHER = 'OTHER'


class LifeInsuranceType(Enum):
    OTHER = 'OTHER'
    TERM_LIFE_INSURANCE = 'TERM_LIFE_INSURANCE'
    UNIVERSAL_LIFE_INSURANCE = 'UNIVERSAL_LIFE_INSURANCE'
    WHOLE_LIFE_INSURANCE = 'WHOLE_LIFE_INSURANCE'
    VARIABLE_LIFE_INSURANCE = 'VARIABLE_LIFE_INSURANCE'
    ULIP = 'ULIP'
    ENDOWMENT = 'ENDOWMENT'


class OauthMigrationStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    TO_BE_MIGRATED = 'TO_BE_MIGRATED'
    COMPLETED = 'COMPLETED'


class PolicyStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    OTHER = 'OTHER'


class RepaymentPlanType(Enum):
    STANDARD = 'STANDARD'
    GRADUATED = 'GRADUATED'
    EXTENDED = 'EXTENDED'
    INCOME_BASED = 'INCOME_BASED'
    INCOME_CONTINGENT = 'INCOME_CONTINGENT'
    INCOME_SENSITIVE = 'INCOME_SENSITIVE'
    PAY_AS_YOU_EARN = 'PAY_AS_YOU_EARN'
    REVISED_PAY_AS_YOU_EARN = 'REVISED_PAY_AS_YOU_EARN'


class SourceAccountStatus(Enum):
    IN_REPAYMENT = 'IN_REPAYMENT'
    DEFAULTED = 'DEFAULTED'
    IN_SCHOOL = 'IN_SCHOOL'
    IN_GRACE_PERIOD = 'IN_GRACE_PERIOD'
    DELINQUENCY = 'DELINQUENCY'
    DEFERMENT = 'DEFERMENT'
    FORBEARANCE = 'FORBEARANCE'


class UserClassification(Enum):
    BUSINESS = 'BUSINESS'
    PERSONAL = 'PERSONAL'


class ValuationType(Enum):
    SYSTEM = 'SYSTEM'
    MANUAL = 'MANUAL'


class Type(Enum):
    HOME = 'HOME'
    BUSINESS = 'BUSINESS'
    POBOX = 'POBOX'
    RETAIL = 'RETAIL'
    OFFICE = 'OFFICE'
    SMALL_BUSINESS = 'SMALL_BUSINESS'
    COMMUNICATION = 'COMMUNICATION'
    PERMANENT = 'PERMANENT'
    STATEMENT_ADDRESS = 'STATEMENT_ADDRESS'
    PAYMENT = 'PAYMENT'
    PAYOFF = 'PAYOFF'
    UNKNOWN = 'UNKNOWN'


class AccountAddress(BaseModel):
    address1: Optional[str] = None
    address2: Optional[str] = None
    address3: Optional[str] = None
    city: Optional[str] = None
    country: Optional[str] = None
    sourceType: Optional[str] = None
    state: Optional[str] = None
    street: Optional[str] = None
    type: Optional[Type] = None
    zip: Optional[str] = None


class AdditionalStatus(Enum):
    LOGIN_IN_PROGRESS = 'LOGIN_IN_PROGRESS'
    DATA_RETRIEVAL_IN_PROGRESS = 'DATA_RETRIEVAL_IN_PROGRESS'
    ACCT_SUMMARY_RECEIVED = 'ACCT_SUMMARY_RECEIVED'
    AVAILABLE_DATA_RETRIEVED = 'AVAILABLE_DATA_RETRIEVED'
    PARTIAL_DATA_RETRIEVED = 'PARTIAL_DATA_RETRIEVED'
    DATA_RETRIEVAL_FAILED = 'DATA_RETRIEVAL_FAILED'
    DATA_NOT_AVAILABLE = 'DATA_NOT_AVAILABLE'
    ACCOUNT_LOCKED = 'ACCOUNT_LOCKED'
    ADDL_AUTHENTICATION_REQUIRED = 'ADDL_AUTHENTICATION_REQUIRED'
    BETA_SITE_DEV_IN_PROGRESS = 'BETA_SITE_DEV_IN_PROGRESS'
    CREDENTIALS_UPDATE_NEEDED = 'CREDENTIALS_UPDATE_NEEDED'
    INCORRECT_CREDENTIALS = 'INCORRECT_CREDENTIALS'
    PROPERTY_VALUE_NOT_AVAILABLE = 'PROPERTY_VALUE_NOT_AVAILABLE'
    INVALID_ADDL_INFO_PROVIDED = 'INVALID_ADDL_INFO_PROVIDED'
    REQUEST_TIME_OUT = 'REQUEST_TIME_OUT'
    SITE_BLOCKING_ERROR = 'SITE_BLOCKING_ERROR'
    UNEXPECTED_SITE_ERROR = 'UNEXPECTED_SITE_ERROR'
    SITE_NOT_SUPPORTED = 'SITE_NOT_SUPPORTED'
    SITE_UNAVAILABLE = 'SITE_UNAVAILABLE'
    TECH_ERROR = 'TECH_ERROR'
    USER_ACTION_NEEDED_AT_SITE = 'USER_ACTION_NEEDED_AT_SITE'
    SITE_SESSION_INVALIDATED = 'SITE_SESSION_INVALIDATED'
    NEW_AUTHENTICATION_REQUIRED = 'NEW_AUTHENTICATION_REQUIRED'
    DATASET_NOT_SUPPORTED = 'DATASET_NOT_SUPPORTED'
    ENROLLMENT_REQUIRED_FOR_DATASET = 'ENROLLMENT_REQUIRED_FOR_DATASET'
    CONSENT_REQUIRED = 'CONSENT_REQUIRED'
    CONSENT_EXPIRED = 'CONSENT_EXPIRED'
    CONSENT_REVOKED = 'CONSENT_REVOKED'
    INCORRECT_OAUTH_TOKEN = 'INCORRECT_OAUTH_TOKEN'
    MIGRATION_IN_PROGRESS = 'MIGRATION_IN_PROGRESS'


class Name(Enum):
    BASIC_AGG_DATA = 'BASIC_AGG_DATA'
    ADVANCE_AGG_DATA = 'ADVANCE_AGG_DATA'
    ACCT_PROFILE = 'ACCT_PROFILE'
    DOCUMENT = 'DOCUMENT'


class UpdateEligibility(Enum):
    ALLOW_UPDATE = 'ALLOW_UPDATE'
    ALLOW_UPDATE_WITH_CREDENTIALS = 'ALLOW_UPDATE_WITH_CREDENTIALS'
    DISALLOW_UPDATE = 'DISALLOW_UPDATE'


class AccountDataset(BaseModel):
    additionalStatus: Optional[AdditionalStatus] = Field(
        None,
        description='The status of last update attempted for the dataset. <br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>',
    )
    lastUpdateAttempt: Optional[str] = Field(
        None,
        description='Indicate when the last attempt was performed to update the dataset for the given provider account<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='Indicate when the dataset is last updated successfully for the given provider account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    name: Optional[Name] = Field(
        None,
        description='The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>',
    )
    nextUpdateScheduled: Optional[str] = Field(
        None,
        description='Indicates when the next attempt to update the dataset is scheduled.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    updateEligibility: Optional[UpdateEligibility] = Field(
        None,
        description='Indicate whether the dataset is eligible for update or not.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>',
    )


class Ownership(Enum):
    PRIMARY = 'PRIMARY'
    SECONDARY = 'SECONDARY'
    CUSTODIAN = 'CUSTODIAN'
    OTHERS = 'OTHERS'
    POWER_OF_ATTORNEY = 'POWER_OF_ATTORNEY'
    TRUSTEE = 'TRUSTEE'
    JOINT_OWNER = 'JOINT_OWNER'
    BENEFICIARY = 'BENEFICIARY'
    AAS = 'AAS'
    BUSINESS = 'BUSINESS'
    DBA = 'DBA'
    TRUST = 'TRUST'


class ApiKeyOutput(BaseModel):
    createdDate: Optional[str] = Field(
        None,
        description='The date on which the apiKey was created for the customer.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>',
    )
    expiresIn: Optional[int] = Field(
        None,
        description='Time in seconds after which the JWT token created for users expires.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>',
    )
    key: Optional[str] = Field(
        None,
        description='ApiKey or the issuer key used to generate the JWT token for authentication.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>',
    )
    publicKey: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='Public key uploaded by the customer while generating ApiKey.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>',
    )


class ApiKeyRequest(BaseModel):
    publicKey: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='Public key uploaded by the customer while generating ApiKey.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>',
    )


class ApiKeyResponse(BaseModel):
    apiKey: Optional[List[ApiKeyOutput]] = Field(
        None,
        description='ApiKey customer details.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>',
    )


class AssetClassification(BaseModel):
    allocation: Optional[float] = Field(
        None,
        description='The allocation percentage of the holding.<br><br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>',
    )
    classificationType: Optional[str] = Field(
        None,
        description='The type of classification to which the investment belongs (assetClass, country, sector, and style).<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>',
    )
    classificationValue: Optional[str] = Field(
        None,
        description='The value for each classificationType.<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>',
    )


class AssetClassificationList(BaseModel):
    classificationType: Optional[str] = Field(
        None,
        description='The type of classification to which the investment belongs (assetClass, country, sector, and style).<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>',
    )
    classificationValue: Optional[List[str]] = Field(
        None,
        description='The value for each classificationType.<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>',
    )


class ContainerEnum(Enum):
    bank = 'bank'
    creditCard = 'creditCard'
    investment = 'investment'
    insurance = 'insurance'
    loan = 'loan'
    reward = 'reward'
    realEstate = 'realEstate'
    otherAssets = 'otherAssets'
    otherLiabilities = 'otherLiabilities'


class Name1(Enum):
    BASIC_ACCOUNT_INFO = 'BASIC_ACCOUNT_INFO'
    TRANSACTIONS = 'TRANSACTIONS'
    STATEMENTS = 'STATEMENTS'
    HOLDINGS = 'HOLDINGS'
    ACCOUNT_DETAILS = 'ACCOUNT_DETAILS'
    TAX = 'TAX'
    EBILLS = 'EBILLS'
    FULL_ACCT_NUMBER = 'FULL_ACCT_NUMBER'
    BANK_TRANSFER_CODE = 'BANK_TRANSFER_CODE'
    HOLDER_NAME = 'HOLDER_NAME'
    HOLDER_DETAILS = 'HOLDER_DETAILS'
    PAYMENT_PROFILE = 'PAYMENT_PROFILE'
    PAYMENT_DETAILS = 'PAYMENT_DETAILS'
    INTEREST_DETAILS = 'INTEREST_DETAILS'
    COVERAGE = 'COVERAGE'


class AdditionalStatus1(Enum):
    SCHEDULED = 'SCHEDULED'
    TEMP_ERROR = 'TEMP_ERROR'
    SITE_BLOCKING = 'SITE_BLOCKING'
    SITE_NOT_SUPPORTED = 'SITE_NOT_SUPPORTED'
    REAL_TIME_MFA_REQUIRED = 'REAL_TIME_MFA_REQUIRED'
    USER_ACTION_REQUIRED = 'USER_ACTION_REQUIRED'
    UNSUBSCRIBED = 'UNSUBSCRIBED'
    MANUAL_ACCOUNT = 'MANUAL_ACCOUNT'


class Status(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class AutoRefresh(BaseModel):
    additionalStatus: Optional[AdditionalStatus1] = Field(
        None,
        description='Indicates the reason for the status.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>',
    )
    asOfDate: Optional[str] = Field(
        None,
        description='Date on which the auto refresh status is determined.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    status: Optional[Status] = Field(
        None,
        description='Indicates whether auto refresh is enabled or disabled.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>',
    )


class Type1(Enum):
    BSB = 'BSB'
    IFSC = 'IFSC'
    ROUTING_NUMBER = 'ROUTING_NUMBER'
    SORT_CODE = 'SORT_CODE'


class BankTransferCode(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The FI's branch identification number.Additional Details: The routing number of the bank account in the United States. For non-United States accounts, it is the IFSC code (India), BSB number (Australia), and sort code (United Kingdom). <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST verification</li></ul>",
    )
    type: Optional[Type1] = Field(
        None,
        description='The bank transfer code type varies depending on the region of the account origination. <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST verification</li></ul><b>Applicable Values</b><br>',
    )


class Capability(BaseModel):
    container: Optional[List[ContainerEnum]] = None
    name: Optional[str] = None


class ClientCredentialToken(BaseModel):
    accessToken: Optional[str] = Field(
        None,
        description='Access Token to access YSL 1.1 services.<br><br><b>Endpoints</b>:<ul><li>POST /auth/token</li></ul>',
    )
    expiresIn: Optional[int] = Field(
        None,
        description='Time in seconds after which the issued accessToken expires.<br><br><b>Endpoints</b>:<ul><li>POST /auth/token</li></ul>',
    )
    issuedAt: Optional[str] = Field(
        None,
        description='The date and time on which accessToken was created for the customer.<br><br><b>Endpoints</b>:<ul><li>POST /auth/token</li></ul>',
    )


class ClientCredentialTokenResponse(BaseModel):
    token: Optional[ClientCredentialToken] = None


class Cobrand(BaseModel):
    cobrandLogin: constr(min_length=1, max_length=2147483647)
    cobrandPassword: constr(min_length=1, max_length=2147483647)
    locale: Optional[constr(pattern=r'[a-z]{2}_[A-Z]{2}')] = Field(
        None,
        description="The customer's locale that will be considered for the localization functionality.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>",
    )


class CobrandLoginRequest(BaseModel):
    cobrand: Cobrand


class Name2(Enum):
    REFRESH = 'REFRESH'
    DATA_UPDATES = 'DATA_UPDATES'
    AUTO_REFRESH_UPDATES = 'AUTO_REFRESH_UPDATES'


class CobrandNotificationEvent(BaseModel):
    callbackUrl: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul>',
    )
    name: Optional[Name2] = Field(
        None,
        description='Name of the event for which the customers must subscribe to receive notifications.<br><b>Valid Value:</b> Notification Events Name<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul><b>Applicable Values</b><br>',
    )


class CobrandNotificationResponse(BaseModel):
    event: Optional[List[CobrandNotificationEvent]] = None


class CobrandPublicKeyResponse(BaseModel):
    keyAlias: Optional[str] = Field(
        None,
        description='The key name used for encryption.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/publicKey</li></ul>',
    )
    keyAsPemString: Optional[str] = Field(
        None,
        description='Public key that the customer should be using to encrypt the credentials and answers before sending to the add & update providerAccounts APIs.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/publicKey</li></ul>',
    )


class CobrandSession(BaseModel):
    cobSession: Optional[str] = None


class ConfigsNotificationEvent(BaseModel):
    callbackUrl: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET configs/notifications/events</li></ul>',
    )
    name: Optional[Name2] = Field(
        None,
        description='Name of the event for which the customers must subscribe to receive notifications.<br><b>Valid Value:</b> Notification Events Name<br><br><b>Endpoints</b>:<ul><li>GET configs/notifications/events</li></ul><b>Applicable Values</b><br>',
    )


class ConfigsNotificationResponse(BaseModel):
    event: Optional[List[ConfigsNotificationEvent]] = None


class ConfigsPublicKey(BaseModel):
    alias: Optional[str] = Field(
        None,
        description='The key name used for encryption.<br><br><b>Endpoints</b>:<ul><li>GET configs/publicKey</li></ul>',
    )
    key: Optional[str] = Field(
        None,
        description='Public key that the customer should be using to encrypt the credentials and answers before sending to the add and update providerAccounts APIs.<br><br><b>Endpoints</b>:<ul><li>GET configs/publicKey</li></ul>',
    )


class ConfigsPublicKeyResponse(BaseModel):
    publicKey: Optional[ConfigsPublicKey] = None


class Contact(BaseModel):
    email: Optional[str] = Field(
        None,
        description='Email Id of the merchant<br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>',
    )
    phone: Optional[str] = Field(
        None,
        description='Phone number of the merchant<br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>',
    )


class Coordinates(BaseModel):
    latitude: Optional[float] = Field(
        None,
        description='Latitude of the merchant<br><br><b>Applicable containers</b>: bank,creditCard,loan<br>',
    )
    longitude: Optional[float] = Field(
        None,
        description='Longitude of the merchant<br><br><b>Applicable containers</b>: bank,creditCard,loan<br>',
    )


class PlanType(Enum):
    PPO = 'PPO'
    HMO = 'HMO'
    UNKNOWN = 'UNKNOWN'


class Type2(Enum):
    VISION = 'VISION'
    DENTAL = 'DENTAL'
    MEDICAL = 'MEDICAL'
    HEALTH = 'HEALTH'
    DEATH_COVER = 'DEATH_COVER'
    TOTAL_PERMANENT_DISABILITY = 'TOTAL_PERMANENT_DISABILITY'
    ACCIDENTAL_DEATH_COVER = 'ACCIDENTAL_DEATH_COVER'
    INCOME_PROTECTION = 'INCOME_PROTECTION'
    DEATH_TOTAL_PERMANENT_DISABILITY = 'DEATH_TOTAL_PERMANENT_DISABILITY'
    OTHER = 'OTHER'


class LimitType(Enum):
    IN_NETWORK = 'IN_NETWORK'
    OUT_NETWORK = 'OUT_NETWORK'


class Type3(Enum):
    DEDUCTIBLE = 'DEDUCTIBLE'
    OUT_OF_POCKET = 'OUT_OF_POCKET'
    ANNUAL_BENEFIT = 'ANNUAL_BENEFIT'
    MAX_BENEFIT = 'MAX_BENEFIT'
    COVERAGE_AMOUNT = 'COVERAGE_AMOUNT'
    MONTHLY_BENEFIT = 'MONTHLY_BENEFIT'
    OTHER = 'OTHER'


class UnitType(Enum):
    PER_FAMILY = 'PER_FAMILY'
    PER_MEMBER = 'PER_MEMBER'


class CreateCobrandNotificationEvent(BaseModel):
    callbackUrl: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul>',
    )


class CreateCobrandNotificationEventRequest(BaseModel):
    event: CreateCobrandNotificationEvent


class CreateConfigsNotificationEvent(BaseModel):
    callbackUrl: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET configs/notifications/events</li></ul>',
    )


class CreateConfigsNotificationEventRequest(BaseModel):
    event: CreateConfigsNotificationEvent


class CreatedAccountInfo(BaseModel):
    accountName: Optional[str] = None
    accountNumber: Optional[str] = None
    id: Optional[int] = None


class CreatedAccountResponse(BaseModel):
    account: Optional[List[CreatedAccountInfo]] = None


class DataExtractsEventLinks(BaseModel):
    href: Optional[str] = None
    methodType: Optional[str] = None
    rel: Optional[str] = None


class HoldingType(Enum):
    stock = 'stock'
    mutualFund = 'mutualFund'
    bond = 'bond'
    CD = 'CD'
    option = 'option'
    moneyMarketFund = 'moneyMarketFund'
    other = 'other'
    remic = 'remic'
    future = 'future'
    commodity = 'commodity'
    currency = 'currency'
    unitInvestmentTrust = 'unitInvestmentTrust'
    employeeStockOption = 'employeeStockOption'
    insuranceAnnuity = 'insuranceAnnuity'
    unknown = 'unknown'
    preferredStock = 'preferredStock'
    ETF = 'ETF'
    warrants = 'warrants'
    ETN = 'ETN'


class OptionType(Enum):
    put = 'put'
    call = 'call'
    unknown = 'unknown'
    other = 'other'


class Status1(Enum):
    LOGIN_IN_PROGRESS = 'LOGIN_IN_PROGRESS'
    USER_INPUT_REQUIRED = 'USER_INPUT_REQUIRED'
    IN_PROGRESS = 'IN_PROGRESS'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    MIGRATION_IN_PROGRESS = 'MIGRATION_IN_PROGRESS'


class DataExtractsProviderAccount(BaseModel):
    aggregationSource: Optional[AggregationSource] = Field(
        None,
        description='The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    dataset: Optional[List[AccountDataset]] = Field(
        None,
        description='Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    isDeleted: Optional[bool] = Field(
        None,
        description='Indicates if the provider account is deleted from the system.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>',
    )
    isManual: Optional[bool] = Field(
        None,
        description='Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>',
    )
    oauthMigrationStatus: Optional[OauthMigrationStatus] = Field(
        None,
        description='Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    providerId: Optional[int] = Field(
        None,
        description='Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    requestId: Optional[str] = Field(
        None,
        description='Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    status: Optional[Status1] = Field(
        None,
        description='The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )


class BaseType(Enum):
    CREDIT = 'CREDIT'
    DEBIT = 'DEBIT'


class CategorySource(Enum):
    SYSTEM = 'SYSTEM'
    USER = 'USER'


class CategoryType(Enum):
    TRANSFER = 'TRANSFER'
    DEFERRED_COMPENSATION = 'DEFERRED_COMPENSATION'
    UNCATEGORIZE = 'UNCATEGORIZE'
    INCOME = 'INCOME'
    EXPENSE = 'EXPENSE'


class SourceType(Enum):
    AGGREGATED = 'AGGREGATED'
    MANUAL = 'MANUAL'


class Status2(Enum):
    POSTED = 'POSTED'
    PENDING = 'PENDING'
    SCHEDULED = 'SCHEDULED'
    FAILED = 'FAILED'
    CLEARED = 'CLEARED'


class SubType(Enum):
    AUTH_HOLD = 'AUTH_HOLD'
    AUTH_REQUEST = 'AUTH_REQUEST'
    OVERDRAFT_CHARGE = 'OVERDRAFT_CHARGE'
    CREDIT_ADJUSTMENT = 'CREDIT_ADJUSTMENT'
    PIN_DEBIT = 'PIN_DEBIT'
    BANK_DIRECT_DEPOSIT = 'BANK_DIRECT_DEPOSIT'
    DIVIDEND_DEPOSIT = 'DIVIDEND_DEPOSIT'
    INTEREST_SAVINGS = 'INTEREST_SAVINGS'
    INTEREST_ADJUSTMENT = 'INTEREST_ADJUSTMENT'
    ONLINE_PURCHASE = 'ONLINE_PURCHASE'
    PURCHASED_WITH_CHECK = 'PURCHASED_WITH_CHECK'
    RECURRING_BILLING = 'RECURRING_BILLING'
    TAX_PAYMENT = 'TAX_PAYMENT'
    PAYMENT_BY_CHECK = 'PAYMENT_BY_CHECK'
    PAYMENT_PLAN = 'PAYMENT_PLAN'
    FEE_REFUND = 'FEE_REFUND'
    WIRE_TRANSFER_CHARGE = 'WIRE_TRANSFER_CHARGE'
    ACCOUNT_TO_ACCOUNT_TRANSFER = 'ACCOUNT_TO_ACCOUNT_TRANSFER'
    BANK_TO_BANK_TRANSACTION = 'BANK_TO_BANK_TRANSACTION'
    BANK_TO_NON_BANK_ACCOUNT_TRANSFER = 'BANK_TO_NON_BANK_ACCOUNT_TRANSFER'
    CASH_WITHDRAWAL_AT_FI = 'CASH_WITHDRAWAL_AT_FI'
    ATM_CASH_WITHDRAWAL = 'ATM_CASH_WITHDRAWAL'
    AUTH_PROCESSING = 'AUTH_PROCESSING'
    AUTH_RELEASE = 'AUTH_RELEASE'
    PRE_AUTH = 'PRE_AUTH'
    AUTH_COMPLETE = 'AUTH_COMPLETE'
    AUTH_VOID = 'AUTH_VOID'
    BALANCE_ENQUIRY = 'BALANCE_ENQUIRY'
    ACCOUNT_VERIFICATION = 'ACCOUNT_VERIFICATION'
    PRE_AUTH_COMPLETION = 'PRE_AUTH_COMPLETION'
    SERVICE_CHARGE = 'SERVICE_CHARGE'
    SERVICE_CHARGE_FEE_REFUND = 'SERVICE_CHARGE_FEE_REFUND'
    RETURNED_CHECK_CHARGE = 'RETURNED_CHECK_CHARGE'
    RETURNED_CHECK_REIMBURSEMENT = 'RETURNED_CHECK_REIMBURSEMENT'
    CASH_ADVANCE = 'CASH_ADVANCE'
    BILL_PAY_CHARGE = 'BILL_PAY_CHARGE'
    CHECK_IMAGE_SERVICE_CHARGE = 'CHECK_IMAGE_SERVICE_CHARGE'
    OVERDRAFT_PROTECTION_CHARGE = 'OVERDRAFT_PROTECTION_CHARGE'
    STOP_PAYMENT_CHARGE = 'STOP_PAYMENT_CHARGE'
    CHECKS_ORDERING_CHARGE = 'CHECKS_ORDERING_CHARGE'
    MONTHLY_MAINTENANCE_CHARGE = 'MONTHLY_MAINTENANCE_CHARGE'
    DEBIT_CARD_FEE = 'DEBIT_CARD_FEE'
    CONVENIENCE_FEE = 'CONVENIENCE_FEE'
    PERSONAL_LOAN_CREDIT = 'PERSONAL_LOAN_CREDIT'
    CREDIT_CARD_CREDIT = 'CREDIT_CARD_CREDIT'
    AUTO_LOAN = 'AUTO_LOAN'
    HOME_LOAN_MORTGAGE = 'HOME_LOAN_MORTGAGE'
    SHORT_TERM_CREDIT = 'SHORT_TERM_CREDIT'
    SIGNATURE_DEBIT = 'SIGNATURE_DEBIT'
    CONTACT_LESS_DEBIT = 'CONTACT_LESS_DEBIT'
    DEFERRED_DEPOSIT = 'DEFERRED_DEPOSIT'
    DEFERRED_BILL_PAY = 'DEFERRED_BILL_PAY'
    INSTALLMENT_PAYMENT = 'INSTALLMENT_PAYMENT'
    RECURRING_SUBSCRIPTION_PAYMENT = 'RECURRING_SUBSCRIPTION_PAYMENT'
    HOLD_CHECK_PAYMENT = 'HOLD_CHECK_PAYMENT'
    CAPITAL_GAINS_DISTIBUTION = 'CAPITAL_GAINS_DISTIBUTION'
    CG_LONG_TERM_DEPOSIT = 'CG_LONG_TERM_DEPOSIT'
    OPEN_SALE_DEPOSIT = 'OPEN_SALE_DEPOSIT'
    INTEREST__CHECK = 'INTEREST__CHECK'
    PURCHASE_VOID = 'PURCHASE_VOID'
    PURCHASE_WITH_CREDIT_CARD = 'PURCHASE_WITH_CREDIT_CARD'
    PURCHASE_WITH_DEBIT_CARD = 'PURCHASE_WITH_DEBIT_CARD'
    CHARGE_A_REPEAT_CUSTOMER = 'CHARGE_A_REPEAT_CUSTOMER'
    DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT = (
        'DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT'
    )
    FEE_PAYMENT = 'FEE_PAYMENT'
    FINANCE_CHARGE_REFUND = 'FINANCE_CHARGE_REFUND'
    TRANSACTION_VOID = 'TRANSACTION_VOID'
    FEE_VOID = 'FEE_VOID'
    DEBIT_CARD_WITHDRAWAL_AT_STORE = 'DEBIT_CARD_WITHDRAWAL_AT_STORE'
    ELECTRONIC_PAYMENT = 'ELECTRONIC_PAYMENT'
    ACH_DEBIT = 'ACH_DEBIT'
    ATM_TELLER_DEPOSIT = 'ATM_TELLER_DEPOSIT'
    POS_DEBIT = 'POS_DEBIT'
    BANK_ADJUSTMENT = 'BANK_ADJUSTMENT'
    CHARGES_FEES = 'CHARGES_FEES'
    INTEREST = 'INTEREST'
    DEPOSITS_CREDITS = 'DEPOSITS_CREDITS'
    PAYMENT = 'PAYMENT'
    PURCHASE = 'PURCHASE'
    REFUND = 'REFUND'
    TRANSFER = 'TRANSFER'
    WITHDRAWAL = 'WITHDRAWAL'
    OTHER_DEPOSITS = 'OTHER_DEPOSITS'
    OTHER_WITHDRAWALS = 'OTHER_WITHDRAWALS'
    ADJUSTMENT = 'ADJUSTMENT'
    FINANCE_CHARGE = 'FINANCE_CHARGE'
    OTHER_CHARGES_FEES = 'OTHER_CHARGES_FEES'
    ANNUAL_FEE = 'ANNUAL_FEE'
    DEPOSIT = 'DEPOSIT'
    DIRECT_DEPOSIT_SALARY = 'DIRECT_DEPOSIT_SALARY'
    INVESTMENT_INCOME_CASH = 'INVESTMENT_INCOME_CASH'
    SSA = 'SSA'
    REWARDS = 'REWARDS'
    CHECK_DEPOSIT = 'CHECK_DEPOSIT'
    MOBILE_REMOTE_DEPOSIT = 'MOBILE_REMOTE_DEPOSIT'
    TELLER_DEPOSIT = 'TELLER_DEPOSIT'
    TAX_REFUND = 'TAX_REFUND'
    CREDIT_CARD_PAYMENT = 'CREDIT_CARD_PAYMENT'
    INSURANCE_PAYMENT = 'INSURANCE_PAYMENT'
    UTILITIES_PAYMENT = 'UTILITIES_PAYMENT'
    CHILD_SUPPORT = 'CHILD_SUPPORT'
    LOAN = 'LOAN'
    PERSONAL_LOAN = 'PERSONAL_LOAN'
    STUDENT_LOAN = 'STUDENT_LOAN'
    SALES_TAX = 'SALES_TAX'
    REIMBURSEMENT = 'REIMBURSEMENT'
    BALANCE_TRANSFER = 'BALANCE_TRANSFER'
    WIRE_TRANSFER = 'WIRE_TRANSFER'
    OVERDRAFT_PROTECTION = 'OVERDRAFT_PROTECTION'
    DEBIT = 'DEBIT'
    CREDIT = 'CREDIT'
    NSF_FEES = 'NSF_FEES'


class DataExtractsUser(BaseModel):
    loginName: Optional[str] = None


class DerivedHoldingsLinks(BaseModel):
    holdings: Optional[str] = None


class DataSourceType(Enum):
    S = 'S'
    C = 'C'
    CF = 'CF'


class DerivedTransactionsLinks(BaseModel):
    transactions: Optional[str] = Field(
        None,
        description='Link of the transaction API service that corresponds to the value derivation.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>',
    )


class Description(BaseModel):
    consumer: Optional[str] = Field(
        None,
        description='The description of the transaction as defined by the consumer. The consumer can define or provide more details of the transaction in this field.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>',
    )
    original: Optional[str] = Field(
        None,
        description='Original transaction description as it appears at the FI site.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>',
    )
    security: Optional[str] = Field(
        None,
        description='The description will provide the actual name of the security.<br><br><b>Applicable containers</b>: investment<br>',
    )
    simple: Optional[str] = Field(
        None,
        description='The transaction description that appears at the FI site may not be self-explanatory, i.e., the source, purpose of the transaction may not be evident. Yodlee attempts to simplify and make the transaction meaningful to the consumer, and this simplified transaction description is provided in the simple description field.Note: The simple description field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>',
    )


class DetailCategory(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The unique identifier of the detail category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the detail category<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )


class DocType(Enum):
    STMT = 'STMT'
    TAX = 'TAX'
    EBILL = 'EBILL'


class Document(BaseModel):
    accountID: Optional[int] = Field(
        None,
        description='The unique identifier for the account. The account ID to which the document is linked.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>',
    )
    docType: Optional[DocType] = Field(
        None,
        description='Indicates the type of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>',
    )
    formType: Optional[str] = Field(
        None,
        description='Indicates the type of the tax form.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>',
    )
    id: Optional[str] = Field(
        None,
        description="The document's primary key and unique identifier.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>",
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='Indicates the date and time the document was last updated.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>',
    )
    name: Optional[str] = Field(
        None,
        description='Indicates the name of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>',
    )
    source: Optional[str] = Field(
        None,
        description='Indicates the source of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>',
    )
    status: Optional[str] = Field(
        None,
        description='Indicates the status of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>',
    )


class DocumentDownload(BaseModel):
    docContent: Optional[str] = Field(
        None,
        description='Contents of the document in Base64 format.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>',
    )
    id: Optional[str] = Field(
        None,
        description="The document's primary key and unique identifier.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>",
    )


class DocumentDownloadResponse(BaseModel):
    document: Optional[List[DocumentDownload]] = None


class DocumentResponse(BaseModel):
    document: Optional[List[Document]] = None


class Type4(Enum):
    PRIMARY = 'PRIMARY'
    SECONDARY = 'SECONDARY'
    PERSONAL = 'PERSONAL'
    WORK = 'WORK'
    OTHERS = 'OTHERS'


class Email(BaseModel):
    type: Optional[Type4] = None
    value: Optional[str] = None


class Type5(Enum):
    HOME = 'HOME'
    BUSINESS = 'BUSINESS'
    POBOX = 'POBOX'
    RETAIL = 'RETAIL'
    OFFICE = 'OFFICE'
    SMALL_BUSINESS = 'SMALL_BUSINESS'
    COMMUNICATION = 'COMMUNICATION'
    PERMANENT = 'PERMANENT'
    STATEMENT_ADDRESS = 'STATEMENT_ADDRESS'
    PAYMENT = 'PAYMENT'
    PAYOFF = 'PAYOFF'
    UNKNOWN = 'UNKNOWN'


class EvaluateAccountAddress(BaseModel):
    address1: Optional[str] = None
    address2: Optional[str] = None
    address3: Optional[str] = None
    city: Optional[str] = None
    country: Optional[str] = None
    sourceType: Optional[str] = None
    state: Optional[str] = None
    street: str
    type: Optional[Type5] = None
    zip: Optional[str] = None


class EvaluateAddressRequest(BaseModel):
    address: EvaluateAccountAddress


class EvaluateAddressResponse(BaseModel):
    address: Optional[List[AccountAddress]] = None
    isValidAddress: Optional[bool] = None


class Type6(Enum):
    text = 'text'
    password = 'password'
    option = 'option'
    checkbox = 'checkbox'
    radio = 'radio'
    image = 'image'


class Field1(Enum):
    amount = 'amount'
    description = 'description'


class Operation(Enum):
    numberEquals = 'numberEquals'
    numberLessThan = 'numberLessThan'
    numberLessThanEquals = 'numberLessThanEquals'
    numberGreaterThan = 'numberGreaterThan'
    numberGreaterThanEquals = 'numberGreaterThanEquals'
    stringEquals = 'stringEquals'
    stringContains = 'stringContains'


class FieldOperation(BaseModel):
    field: Optional[Field1] = Field(
        None,
        description='Field for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>amount</li><li>description</li></ul><b>Applicable Values</b><br>',
    )
    operation: Optional[Operation] = Field(
        None,
        description='Operation for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable values (depends on the value of field)</b>:<ul><li>field is <b>description</b> -> operation can be<ol><li>stringEquals</li><li>stringContains</li></ol></li><li>field is <b>amount</b> -> operation can be<ol><li>numberEquals</li><li>numberLessThan</li><li>numberLessThanEquals</li><li>numberGreaterThan</li><li>numberGreaterThanEquals</li></ol></li></ul><b>Applicable Values</b><br>',
    )
    value: Optional[Dict[str, Any]] = Field(
        None,
        description='The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>field is <b>description</b> -> value should be <b>min of 3 and max of 50 characters</b></li><li>field is <b>amount</b> -> value should be <b> min value of 0 and a max value of 99999999999.99</b></li></ul>',
    )


class FullAccountNumberList(BaseModel):
    paymentAccountNumber: Optional[str] = Field(
        None,
        description='Payment Account Number of given account.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    unmaskedAccountNumber: Optional[str] = Field(
        None,
        description='Unmasked account number of given account.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )


class HoldingAssetClassificationListResponse(BaseModel):
    assetClassificationList: Optional[List[AssetClassificationList]] = None


class HoldingTypeEnum(Enum):
    stock = 'stock'
    mutualFund = 'mutualFund'
    bond = 'bond'
    CD = 'CD'
    option = 'option'
    moneyMarketFund = 'moneyMarketFund'
    other = 'other'
    remic = 'remic'
    future = 'future'
    commodity = 'commodity'
    currency = 'currency'
    unitInvestmentTrust = 'unitInvestmentTrust'
    employeeStockOption = 'employeeStockOption'
    insuranceAnnuity = 'insuranceAnnuity'
    unknown = 'unknown'
    preferredStock = 'preferredStock'
    ETF = 'ETF'
    warrants = 'warrants'
    ETN = 'ETN'


class HoldingTypeListResponse(BaseModel):
    holdingType: Optional[List[HoldingTypeEnum]] = None


class Type7(Enum):
    NIE = 'NIE'
    DNI = 'DNI'
    EIN = 'EIN'
    BN = 'BN'
    AADHAR = 'AADHAR'
    NIN = 'NIN'
    NRIC = 'NRIC'


class Identifier(BaseModel):
    type: Optional[Type7] = Field(None, description='Type of Identifier')
    value: Optional[str] = Field(None, description='Value of the identifier')


class FormType(Enum):
    login = 'login'
    questionAndAnswer = 'questionAndAnswer'
    token = 'token'
    image = 'image'


class Source(Enum):
    YODLEE = 'YODLEE'
    FACTUAL = 'FACTUAL'


class Merchant(BaseModel):
    address: Optional[AccountAddress] = None
    categoryLabel: Optional[List[str]] = Field(
        None,
        description='The business categories of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard<br><b>Applicable Values</b><br>',
    )
    contact: Optional[Contact] = None
    coordinates: Optional[Coordinates] = None
    id: Optional[str] = Field(
        None,
        description='Identifier of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    source: Optional[Source] = Field(
        None,
        description='The source through which merchant information is retrieved.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>',
    )
    website: Optional[str] = Field(
        None,
        description='The website of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>',
    )


class Currency(Enum):
    AUD = 'AUD'
    BRL = 'BRL'
    CAD = 'CAD'
    EUR = 'EUR'
    GBP = 'GBP'
    HKD = 'HKD'
    IDR = 'IDR'
    INR = 'INR'
    JPY = 'JPY'
    NZD = 'NZD'
    SGD = 'SGD'
    USD = 'USD'
    ZAR = 'ZAR'
    CNY = 'CNY'
    VND = 'VND'
    MYR = 'MYR'
    CHF = 'CHF'


class Money(BaseModel):
    amount: float
    currency: Currency


class NameModel(BaseModel):
    first: Optional[str] = None
    fullName: Optional[str] = None
    last: Optional[str] = None
    middle: Optional[str] = None


class Option(BaseModel):
    displayText: Optional[str] = Field(
        None,
        description='The text that is displayed to the user for that option in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    isSelected: Optional[bool] = Field(
        None,
        description='The option that is selected by default in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    optionValue: Optional[str] = Field(
        None,
        description='The value that is associated with the option.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )


class Type8(Enum):
    ROUTING_NUMBER = 'ROUTING_NUMBER'
    BSB = 'BSB'
    IFSC = 'IFSC'
    SORT_CODE = 'SORT_CODE'


class PaymentBankTransferCode(BaseModel):
    id: Optional[str] = Field(None, description='Value of the identifier')
    type: Optional[Type8] = Field(None, description='Type of BankTransferCode')


class Type9(Enum):
    REFERENCE_NUMBER = 'REFERENCE_NUMBER'
    PLATFORM_CODE = 'PLATFORM_CODE'


class PaymentIdentifier(BaseModel):
    type: Optional[Type9] = Field(None, description='Type of Identifier')
    value: Optional[str] = Field(None, description='Value of the identifier')


class PaymentProfile(BaseModel):
    address: Optional[List[AccountAddress]] = Field(
        None,
        description='The address of the lender to which the monthly payments or the loan payoff amount should be paid. <br><b>Additional Details:</b>The address field applies only to the student loan account type.<br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    identifier: Optional[PaymentIdentifier] = None
    paymentBankTransferCode: Optional[PaymentBankTransferCode] = None


class Type10(Enum):
    HOME = 'HOME'
    WORK = 'WORK'
    LANDLINE = 'LANDLINE'
    MOBILE = 'MOBILE'


class PhoneNumber(BaseModel):
    type: Optional[Type10] = Field(None, description='type of phone number')
    value: Optional[str] = Field(None, description='Phone Number')


class Profile(BaseModel):
    address: Optional[List[AccountAddress]] = Field(
        None,
        description='Address available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    email: Optional[List[Email]] = Field(
        None,
        description='Email Id available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    gender: Optional[str] = Field(
        None,
        description='Gender of the provider account holder.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET providerAccounts/profile</li></ul>',
    )
    identifier: Optional[List[Identifier]] = Field(
        None,
        description='Identifiers available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    name: Optional[NameModel] = None
    phoneNumber: Optional[List[PhoneNumber]] = Field(
        None,
        description='Phone number available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )


class Status3(Enum):
    LOGIN_IN_PROGRESS = 'LOGIN_IN_PROGRESS'
    USER_INPUT_REQUIRED = 'USER_INPUT_REQUIRED'
    IN_PROGRESS = 'IN_PROGRESS'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    MIGRATION_IN_PROGRESS = 'MIGRATION_IN_PROGRESS'


class ProviderAccountPreferences(BaseModel):
    isAutoRefreshEnabled: Optional[bool] = Field(
        None,
        description='Indicates if auto-refreshes have to be triggered for the provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=preferences</li><li>GET providerAccounts/{providerAccountId}?include=preferences</li></ul>',
    )
    isDataExtractsEnabled: Optional[bool] = Field(
        None,
        description='Indicates if the updates to the provider account should be part of the data extracts event notification or the data extract data retrieval service.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=preferences</li><li>GET providerAccounts/{providerAccountId}?include=preferences</li></ul>',
    )
    linkedProviderAccountId: Optional[int] = Field(
        None,
        description='LinkedproviderAccountd is a providerAccountId linked by the user to the primary provider account. <br>LinkedProviderAccountId and the providerAccountId belongs to the same institution.<br><br><b>Endpoints</b>:<ul><li>POST Provider Account</li><li>PUT Provider Account</li><li>GET Provider Accounts</li></ul>',
    )


class ProviderAccountPreferencesRequest(BaseModel):
    preferences: Optional[ProviderAccountPreferences] = None


class ProviderAccountProfile(BaseModel):
    id: Optional[int] = Field(
        None,
        description='Unique identifier for profile<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/profile</li></ul>',
    )
    profile: Optional[List[Profile]] = Field(
        None,
        description='PII related data like address, name, phoneNumber, identifier and email.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/profile</li></ul>',
    )


class DatasetNameEnum(Enum):
    BASIC_AGG_DATA = 'BASIC_AGG_DATA'
    ADVANCE_AGG_DATA = 'ADVANCE_AGG_DATA'
    ACCT_PROFILE = 'ACCT_PROFILE'
    DOCUMENT = 'DOCUMENT'


class ProviderAccountUserProfileResponse(BaseModel):
    providerAccount: Optional[List[ProviderAccountProfile]] = None


class PRIORITY(Enum):
    POPULAR = 'POPULAR'
    SUGGESTED = 'SUGGESTED'
    COBRAND = 'COBRAND'
    SEARCH = 'SEARCH'
    ALL = 'ALL'


class AccountTypeEnum(Enum):
    CURRENT = 'CURRENT'
    BROKERAGE_CASH = 'BROKERAGE_CASH'


class AuthParameterEnum(Enum):
    authorizationCode = 'authorizationCode'
    idToken = 'idToken'
    authResponse = 'authResponse'


class AuthType(Enum):
    OAUTH = 'OAUTH'
    CREDENTIALS = 'CREDENTIALS'
    MFA_CREDENTIALS = 'MFA_CREDENTIALS'


class Status5(Enum):
    Supported = 'Supported'
    Beta = 'Beta'
    Unsupported = 'Unsupported'


class Name4(Enum):
    BASIC_AGG_DATA = 'BASIC_AGG_DATA'
    ADVANCE_AGG_DATA = 'ADVANCE_AGG_DATA'
    ACCT_PROFILE = 'ACCT_PROFILE'
    DOCUMENT = 'DOCUMENT'


class BalanceType(Enum):
    EXPIRING_BALANCE = 'EXPIRING_BALANCE'
    BALANCE_TO_LEVEL = 'BALANCE_TO_LEVEL'
    BALANCE_TO_REWARD = 'BALANCE_TO_REWARD'
    BALANCE = 'BALANCE'
    TOTAL_BALANCE = 'TOTAL_BALANCE'


class RewardBalance(BaseModel):
    balance: Optional[float] = Field(
        None,
        description='The actual reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    balanceToLevel: Optional[str] = Field(
        None,
        description='The balance required to reach a reward level.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    balanceToReward: Optional[str] = Field(
        None,
        description='The balance required to qualify for a reward such as retaining membership, business reward, etc.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    balanceType: Optional[BalanceType] = Field(
        None,
        description='The type of reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    description: Optional[str] = Field(
        None,
        description='The description for the reward balance as available at provider source.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    expiryDate: Optional[str] = Field(
        None,
        description='The date on which the balance expires.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    units: Optional[str] = Field(
        None,
        description='Unit of reward balance - miles, points, segments, dollars, credits.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )


class RuleClause(BaseModel):
    field: Optional[Field1] = Field(
        None,
        description='Field for which the clause is created.<br><br><br><b>Valid Values</b>:amount,description<b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    fieldValue: Optional[str] = Field(
        None,
        description='The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    operation: Optional[Operation] = Field(
        None,
        description='Operation for which the clause is created.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    ruleClauseId: Optional[int] = Field(
        None,
        description='Unique identifier generated for the rule clause.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    userDefinedRuleId: Optional[int] = Field(
        None,
        description='Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )


class Statement(BaseModel):
    accountId: Optional[int] = Field(
        None,
        description='Account to which the statement belongs to.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    amountDue: Optional[Money] = None
    apr: Optional[float] = Field(
        None,
        description='The APR applied to the balance on the credit card account, as available in the statement.<br><b>Note:</b> In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    billingPeriodEnd: Optional[str] = Field(
        None,
        description='The end date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    billingPeriodStart: Optional[str] = Field(
        None,
        description='The start date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    cashAdvance: Optional[Money] = None
    cashApr: Optional[float] = Field(
        None,
        description='The APR applicable to cash withdrawals on the credit card account.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    dueDate: Optional[str] = Field(
        None,
        description='The date by when the minimum payment is due to be paid.<br><b>Note:</b> The due date that appears in the statement may differ from the due date at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    interestAmount: Optional[Money] = None
    isLatest: Optional[bool] = Field(
        None,
        description='The field is set to true if the statement is the latest generated statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    lastPaymentAmount: Optional[Money] = None
    lastPaymentDate: Optional[str] = Field(
        None,
        description='The date on which the last payment was done during the billing cycle.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='The date when the account was last updated by Yodlee.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )
    loanBalance: Optional[Money] = None
    minimumPayment: Optional[Money] = None
    newCharges: Optional[Money] = None
    principalAmount: Optional[Money] = None
    statementDate: Optional[str] = Field(
        None,
        description='The date on which the statement is generated.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>',
    )


class StatementResponse(BaseModel):
    statement: Optional[List[Statement]] = None


class StockExchangeDetail(BaseModel):
    countryCode: Optional[str] = Field(
        None,
        description='Country codes are geocodes developed to represent countries and dependent areas.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    currencyCode: Optional[str] = Field(
        None,
        description='ISO codes of currency.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    exchangeCode: Optional[str] = Field(
        None,
        description='An Exchange code is a four-character code used to identify stock markets and other trading exchanges within global trading.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    symbol: Optional[str] = Field(
        None,
        description='Ticker symbol representing particular securities listed on an exchange.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )


class TotalCount(BaseModel):
    count: Optional[int] = None


class Status7(Enum):
    POSTED = 'POSTED'
    PENDING = 'PENDING'
    SCHEDULED = 'SCHEDULED'
    FAILED = 'FAILED'
    CLEARED = 'CLEARED'


class Transaction(BaseModel):
    CONTAINER_1: Optional[CONTAINER] = Field(
        None,
        alias='CONTAINER',
        description="The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>",
    )
    accountId: Optional[int] = Field(
        None,
        description='The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    amount: Optional[Money] = None
    baseType: Optional[BaseType] = Field(
        None,
        description='Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>',
    )
    category: Optional[str] = Field(
        None,
        description='The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    categoryId: Optional[int] = Field(
        None,
        description='The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    categorySource: Optional[CategorySource] = Field(
        None,
        description='Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>',
    )
    categoryType: Optional[CategoryType] = Field(
        None,
        description='The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    checkNumber: Optional[str] = Field(
        None,
        description='The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>',
    )
    commission: Optional[Money] = None
    createdDate: Optional[str] = None
    cusipNumber: Optional[str] = Field(
        None,
        description='The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>',
    )
    date: Optional[str] = Field(
        None,
        description='The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    description: Optional[Description] = None
    detailCategoryId: Optional[int] = Field(
        None,
        description='The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>',
    )
    highLevelCategoryId: Optional[int] = Field(
        None,
        description='The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    holdingDescription: Optional[str] = Field(
        None,
        description='For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>',
    )
    id: Optional[int] = Field(
        None,
        description='An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    interest: Optional[Money] = None
    isManual: Optional[bool] = Field(
        None,
        description='Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    isin: Optional[str] = Field(
        None,
        description='International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.<br><br><b>Applicable containers</b>: investment<br>',
    )
    lastUpdated: Optional[str] = None
    memo: Optional[str] = Field(
        None,
        description='Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    merchant: Optional[Merchant] = None
    parentCategoryId: Optional[int] = Field(
        None,
        description='The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    postDate: Optional[str] = Field(
        None,
        description='The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>',
    )
    price: Optional[Money] = None
    principal: Optional[Money] = None
    quantity: Optional[float] = Field(
        None,
        description='The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>',
    )
    runningBalance: Optional[Money] = None
    sedol: Optional[str] = Field(
        None,
        description='SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><br><b>Applicable containers</b>: investment<br>',
    )
    settleDate: Optional[str] = Field(
        None,
        description='It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>',
    )
    sourceId: Optional[str] = Field(
        None,
        description='A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.',
    )
    sourceType: Optional[SourceType] = Field(
        None,
        description='The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>',
    )
    status: Optional[Status7] = Field(
        None,
        description='The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>',
    )
    subType: Optional[SubType] = Field(
        None,
        description='The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    symbol: Optional[str] = Field(
        None,
        description='The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>',
    )
    transactionDate: Optional[str] = Field(
        None,
        description='The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    type: Optional[str] = Field(
        None,
        description='The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>',
    )
    valoren: Optional[str] = Field(
        None,
        description='It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.<br><br><b>Applicable containers</b>: investment<br>',
    )


class TransactionCategorizationRule(BaseModel):
    categoryLevelId: Optional[int] = Field(
        None,
        description='The level of the category for which the rule is created.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>',
    )
    memId: Optional[int] = Field(
        None,
        description='Unique identifier of the user.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    ruleClauses: Optional[List[RuleClause]] = Field(
        None,
        description='Details of rules. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    rulePriority: Optional[int] = Field(
        None,
        description='The order in which the rules get executed on transactions.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    transactionCategorisationId: Optional[int] = Field(
        None,
        description='Category id that is assigned to the transaction when the transaction matches the rule clause. This is the id field of the transaction category resource.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    userDefinedRuleId: Optional[int] = Field(
        None,
        description='Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )


class Source1(Enum):
    SYSTEM = 'SYSTEM'
    USER = 'USER'


class TransactionCategorizationRuleInfo(BaseModel):
    categoryId: int
    priority: Optional[int] = None
    ruleClause: List[FieldOperation]
    source: Optional[Source1] = None


class TransactionCategorizationRuleRequest(BaseModel):
    rule: TransactionCategorizationRuleInfo


class TransactionCategorizationRuleResponse(BaseModel):
    txnRules: Optional[List[TransactionCategorizationRule]] = None


class Classification2(Enum):
    PERSONAL = 'PERSONAL'
    BUSINESS = 'BUSINESS'


class Type11(Enum):
    TRANSFER = 'TRANSFER'
    DEFERRED_COMPENSATION = 'DEFERRED_COMPENSATION'
    UNCATEGORIZE = 'UNCATEGORIZE'
    INCOME = 'INCOME'
    EXPENSE = 'EXPENSE'


class TransactionCategory(BaseModel):
    category: Optional[str] = Field(
        None,
        description='The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    classification: Optional[Classification2] = Field(
        None,
        description='Category Classification.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>',
    )
    defaultCategoryName: Optional[str] = Field(
        None,
        description='A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>',
    )
    defaultHighLevelCategoryName: Optional[str] = Field(
        None,
        description='A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>',
    )
    detailCategory: Optional[List[DetailCategory]] = Field(
        None,
        description='Entity that provides detail category attributes<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    highLevelCategoryId: Optional[int] = Field(
        None,
        description='The unique identifier of the high level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    highLevelCategoryName: Optional[str] = Field(
        None,
        description='The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier of the category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>',
    )
    source: Optional[Source1] = Field(
        None,
        description='Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>',
    )
    type: Optional[Type11] = Field(
        None,
        description='Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>',
    )


class TransactionCategoryRequest(BaseModel):
    categoryName: Optional[constr(min_length=1, max_length=50)] = None
    parentCategoryId: conint(ge=1)
    source: Optional[str] = None


class TransactionCategoryResponse(BaseModel):
    transactionCategory: Optional[List[TransactionCategory]] = None


class FullAccountNumberField(Enum):
    paymentAccountNumber = 'paymentAccountNumber'
    unmaskedAccountNumber = 'unmaskedAccountNumber'


class TransactionDays(BaseModel):
    fullAccountNumberFields: Optional[List[FullAccountNumberField]] = None
    numberOfTransactionDays: Optional[int] = None


class TransactionResponse(BaseModel):
    transaction: Optional[List[Transaction]] = None


class TransactionTotal(BaseModel):
    count: Optional[int] = None


class Container(Enum):
    bank = 'bank'
    creditCard = 'creditCard'
    investment = 'investment'
    insurance = 'insurance'
    loan = 'loan'
    reward = 'reward'
    realEstate = 'realEstate'
    otherAssets = 'otherAssets'
    otherLiabilities = 'otherLiabilities'


class UpdateAccountInfo(BaseModel):
    accountName: Optional[constr(min_length=1, max_length=100)] = None
    accountNumber: Optional[
        constr(pattern=r'^[a-zA-Z0-9]+$', min_length=0, max_length=100)
    ] = None
    accountStatus: Optional[AccountStatus] = None
    address: Optional[AccountAddress] = None
    amountDue: Optional[Money] = None
    balance: Optional[Money] = None
    container: Optional[Container] = None
    dueDate: Optional[str] = None
    frequency: Optional[Frequency] = None
    homeValue: Optional[Money] = None
    includeInNetWorth: Optional[str] = None
    isEbillEnrolled: Optional[str] = None
    memo: Optional[constr(min_length=0, max_length=250)] = None
    nickname: Optional[constr(min_length=0, max_length=50)] = None


class UpdateAccountRequest(BaseModel):
    account: UpdateAccountInfo


class UpdateCategoryRequest(BaseModel):
    categoryName: Optional[str] = None
    highLevelCategoryName: Optional[str] = None
    id: conint(ge=1)
    source: Source1


class UpdateCobrandNotificationEvent(BaseModel):
    callbackUrl: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul>',
    )


class UpdateCobrandNotificationEventRequest(BaseModel):
    event: UpdateCobrandNotificationEvent


class UpdateConfigsNotificationEvent(BaseModel):
    callbackUrl: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET configs/notifications/events</li></ul>',
    )


class UpdateConfigsNotificationEventRequest(BaseModel):
    event: UpdateConfigsNotificationEvent


class UpdateTransaction(BaseModel):
    categoryId: int
    categorySource: CategorySource
    container: Container
    description: Optional[Description] = None
    memo: Optional[str] = None


class Reason(Enum):
    DATA_NOT_AVAILABLE = 'DATA_NOT_AVAILABLE'
    ACCOUNT_HOLDER_MISMATCH = 'ACCOUNT_HOLDER_MISMATCH'
    FULL_ACCOUNT_NUMBER_AND_BANK_TRANSFER_CODE_NOT_AVAILABLE = (
        'FULL_ACCOUNT_NUMBER_AND_BANK_TRANSFER_CODE_NOT_AVAILABLE'
    )
    FULL_ACCOUNT_NUMBER_NOT_AVAILABLE = 'FULL_ACCOUNT_NUMBER_NOT_AVAILABLE'
    BANK_TRANSFER_CODE_NOT_AVAILABLE = 'BANK_TRANSFER_CODE_NOT_AVAILABLE'
    EXPIRED = 'EXPIRED'
    DATA_MISMATCH = 'DATA_MISMATCH'
    INSTRUCTION_GENERATION_ERROR = 'INSTRUCTION_GENERATION_ERROR'


class VerificationStatus(Enum):
    INITIATED = 'INITIATED'
    DEPOSITED = 'DEPOSITED'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class VerificationType(Enum):
    MATCHING = 'MATCHING'
    CHALLENGE_DEPOSIT = 'CHALLENGE_DEPOSIT'


class Status8(Enum):
    LOGIN_IN_PROGRESS = 'LOGIN_IN_PROGRESS'
    USER_INPUT_REQUIRED = 'USER_INPUT_REQUIRED'
    IN_PROGRESS = 'IN_PROGRESS'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    MIGRATION_IN_PROGRESS = 'MIGRATION_IN_PROGRESS'


class RoleType(Enum):
    INDIVIDUAL = 'INDIVIDUAL'


class UserAccessToken(BaseModel):
    accessTokens: Optional[List[AccessTokens]] = None


class UserAccessTokensResponse(BaseModel):
    user: Optional[UserAccessToken] = None


class UserAddress(BaseModel):
    address1: Optional[str] = None
    address2: Optional[str] = None
    address3: Optional[str] = None
    city: Optional[str] = None
    country: Optional[str] = None
    state: Optional[str] = None
    zip: Optional[str] = None


class Locale(Enum):
    en_US = 'en_US'
    en_ES = 'en_ES'
    fr_CA = 'fr_CA'
    zh_CN = 'zh_CN'


class UserRequestPreferences(BaseModel):
    currency: Optional[Currency] = Field(
        None,
        description='The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>',
    )
    dateFormat: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.',
    )
    locale: Optional[Locale] = Field(
        None,
        description='The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>',
    )
    timeZone: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='The timezone of the user. This attribute is just a place holder and has no impact on any other API services.',
    )


class UserResponsePreferences(BaseModel):
    currency: Optional[Currency] = Field(
        None,
        description='The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>',
    )
    dateFormat: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.',
    )
    locale: Optional[Locale] = Field(
        None,
        description='The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>',
    )
    timeZone: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='The timezone of the user. This attribute is just a place holder and has no impact on any other API services.',
    )


class UserSession(BaseModel):
    userSession: Optional[str] = Field(
        None,
        description='Session provided for a valid user to access API services upon successful authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li></ul>',
    )


class AccountType(Enum):
    SAVINGS = 'SAVINGS'
    CHECKING = 'CHECKING'


class Type12(Enum):
    BSB = 'BSB'
    IFSC = 'IFSC'
    ROUTING_NUMBER = 'ROUTING_NUMBER'
    SORT_CODE = 'SORT_CODE'


class VerificationBankTransferCode(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The FI's branch identification number.Additional Details: The routing number of the bank account in the United States. For non-United States accounts, it is the IFSC code (India), BSB number (Australia), and sort code (United Kingdom). <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST verification</li></ul>",
    )
    type: Optional[Type12] = Field(
        None,
        description='The bank transfer code type varies depending on the region of the account origination. <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST verification</li></ul><b>Applicable Values</b><br>',
    )


class VerificationTransaction(BaseModel):
    amount: Money
    baseType: BaseType


class Matched(Enum):
    COMPLETE = 'COMPLETE'
    NONE = 'NONE'


class VerifyTransactionCriteria(BaseModel):
    amount: float
    baseType: Optional[BaseType] = Field(
        None,
        description='Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>',
    )
    date: str
    dateVariance: Optional[str] = None
    keyword: Optional[str] = None
    matched: Optional[Matched] = Field(
        None,
        description='Indicates if the criteria is matched or not. <br><b>Applicable Values</b><br>',
    )
    verifiedTransaction: Optional[List[Transaction]] = None


class YodleeError(BaseModel):
    errorCode: Optional[str] = None
    errorMessage: Optional[str] = None
    referenceCode: Optional[str] = None


class EventName(Enum):
    REFRESH = 'REFRESH'
    DATA_UPDATES = 'DATA_UPDATES'
    AUTO_REFRESH_UPDATES = 'AUTO_REFRESH_UPDATES'


class TransactionsCategoriesRulesGetResponse(
    RootModel[List[TransactionCategorizationRule]]
):
    root: List[TransactionCategorizationRule]


class Action(Enum):
    run = 'run'


class AccountHolder(BaseModel):
    gender: Optional[str] = Field(
        None,
        description='Identifiers of the account holder.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    identifier: Optional[List[Identifier]] = Field(
        None,
        description='Identifiers of the account holder.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    name: Optional[NameModel] = None
    ownership: Optional[Ownership] = Field(
        None,
        description='Indicates the ownership of the account.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>',
    )


class AccountProfile(BaseModel):
    address: Optional[List[AccountAddress]] = Field(
        None,
        description='Address available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    email: Optional[List[Email]] = Field(
        None,
        description='Email Id available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    identifier: Optional[List[Identifier]] = Field(
        None,
        description='Identifiers available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    phoneNumber: Optional[List[PhoneNumber]] = Field(
        None,
        description='Phone number available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )


class CobrandLoginResponse(BaseModel):
    applicationId: Optional[str] = Field(
        None,
        description='The application identifier.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>',
    )
    cobrandId: Optional[int] = Field(
        None,
        description='Unique identifier of the cobrand (customer) in the system.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>',
    )
    locale: Optional[str] = Field(
        None,
        description="The customer's locale that will be considered for the localization functionality.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>",
    )
    session: Optional[CobrandSession] = None


class ContainerAttributes(BaseModel):
    BANK: Optional[TransactionDays] = None
    CREDITCARD: Optional[TransactionDays] = None
    INSURANCE: Optional[TransactionDays] = None
    INVESTMENT: Optional[TransactionDays] = None
    LOAN: Optional[TransactionDays] = None


class CoverageAmount(BaseModel):
    cover: Optional[Money] = None
    limitType: Optional[LimitType] = Field(
        None,
        description='The type of coverage limit indicates if the coverage is in-network or out-of-network.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>',
    )
    met: Optional[Money] = None
    type: Optional[Type3] = Field(
        None,
        description='The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>',
    )
    unitType: Optional[UnitType] = Field(
        None,
        description='The type of coverage unit indicates if the coverage is for an individual or a family.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>',
    )


class CreateAccountInfo(BaseModel):
    accountName: constr(min_length=1, max_length=100)
    accountNumber: Optional[
        constr(pattern=r'^[a-zA-Z0-9]+$', min_length=0, max_length=100)
    ] = None
    accountType: constr(min_length=1, max_length=2147483647)
    address: Optional[AccountAddress] = None
    amountDue: Optional[Money] = None
    balance: Optional[Money] = None
    dueDate: Optional[str] = None
    frequency: Optional[Frequency] = None
    homeValue: Optional[Money] = None
    includeInNetWorth: Optional[str] = None
    memo: Optional[constr(min_length=0, max_length=250)] = None
    nickname: Optional[constr(min_length=0, max_length=50)] = None
    valuationType: Optional[ValuationType] = None


class CreateAccountRequest(BaseModel):
    account: CreateAccountInfo


class DataExtractsEventUserData(BaseModel):
    links: Optional[List[DataExtractsEventLinks]] = None
    user: Optional[DataExtractsUser] = None


class DataExtractsHolding(BaseModel):
    accountId: Optional[int] = Field(
        None,
        description='Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    accruedIncome: Optional[Money] = None
    accruedInterest: Optional[Money] = None
    contractQuantity: Optional[float] = Field(
        None,
        description='The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>',
    )
    costBasis: Optional[Money] = None
    couponRate: Optional[float] = Field(
        None,
        description='The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    cusipNumber: Optional[str] = Field(
        None,
        description='The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>',
    )
    description: Optional[str] = Field(
        None,
        description='The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    enrichedDescription: Optional[str] = Field(
        None,
        description='The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    exercisedQuantity: Optional[float] = Field(
        None,
        description='The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>',
    )
    expirationDate: Optional[str] = Field(
        None,
        description='The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>',
    )
    grantDate: Optional[str] = Field(
        None,
        description='The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    holdingType: Optional[HoldingType] = Field(
        None,
        description='Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    interestRate: Optional[float] = Field(
        None,
        description='The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    isShort: Optional[bool] = Field(
        None,
        description='Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>',
    )
    isin: Optional[str] = Field(
        None,
        description='The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    matchStatus: Optional[str] = Field(
        None,
        description='Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>',
    )
    maturityDate: Optional[str] = Field(
        None,
        description='The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    optionType: Optional[OptionType] = Field(
        None,
        description='The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>',
    )
    price: Optional[Money] = None
    providerAccountId: Optional[int] = Field(
        None,
        description="Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>",
    )
    quantity: Optional[float] = Field(
        None,
        description='The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    securityStyle: Optional[str] = Field(
        None,
        description='Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    securityType: Optional[str] = Field(
        None,
        description='Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    sedol: Optional[str] = Field(
        None,
        description='The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>',
    )
    spread: Optional[Money] = None
    strikePrice: Optional[Money] = None
    symbol: Optional[str] = Field(
        None,
        description='The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>',
    )
    term: Optional[str] = Field(
        None,
        description='The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    unvestedQuantity: Optional[float] = Field(
        None,
        description='Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    unvestedValue: Optional[Money] = None
    value: Optional[Money] = None
    vestedQuantity: Optional[float] = Field(
        None,
        description='The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    vestedSharesExercisable: Optional[float] = Field(
        None,
        description='The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    vestedValue: Optional[Money] = None
    vestingDate: Optional[str] = Field(
        None,
        description='The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )


class DataExtractsTransaction(BaseModel):
    CONTAINER_1: Optional[CONTAINER] = Field(
        None,
        alias='CONTAINER',
        description="The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>",
    )
    accountId: Optional[int] = Field(
        None,
        description='The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    amount: Optional[Money] = None
    baseType: Optional[BaseType] = Field(
        None,
        description='Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>',
    )
    category: Optional[str] = Field(
        None,
        description='The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    categoryId: Optional[int] = Field(
        None,
        description='The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    categorySource: Optional[CategorySource] = Field(
        None,
        description='Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>',
    )
    categoryType: Optional[CategoryType] = Field(
        None,
        description='The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    checkNumber: Optional[str] = Field(
        None,
        description='The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>',
    )
    commission: Optional[Money] = None
    createdDate: Optional[str] = None
    cusipNumber: Optional[str] = Field(
        None,
        description='The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>',
    )
    date: Optional[str] = Field(
        None,
        description='The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    description: Optional[Description] = None
    detailCategoryId: Optional[int] = Field(
        None,
        description='The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>',
    )
    highLevelCategoryId: Optional[int] = Field(
        None,
        description='The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    holdingDescription: Optional[str] = Field(
        None,
        description='For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>',
    )
    id: Optional[int] = Field(
        None,
        description='An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    interest: Optional[Money] = None
    isDeleted: Optional[bool] = Field(
        None,
        description='Indicates if the transaction is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>',
    )
    isManual: Optional[bool] = Field(
        None,
        description='Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    isin: Optional[str] = Field(
        None,
        description='International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.<br><br><b>Applicable containers</b>: investment<br>',
    )
    lastUpdated: Optional[str] = None
    memo: Optional[str] = Field(
        None,
        description='Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    merchant: Optional[Merchant] = None
    parentCategoryId: Optional[int] = Field(
        None,
        description='The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    postDate: Optional[str] = Field(
        None,
        description='The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>',
    )
    price: Optional[Money] = None
    principal: Optional[Money] = None
    quantity: Optional[float] = Field(
        None,
        description='The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>',
    )
    runningBalance: Optional[Money] = None
    sedol: Optional[str] = Field(
        None,
        description='SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><br><b>Applicable containers</b>: investment<br>',
    )
    settleDate: Optional[str] = Field(
        None,
        description='It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>',
    )
    sourceId: Optional[str] = Field(
        None,
        description='A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.',
    )
    sourceType: Optional[SourceType] = Field(
        None,
        description='The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>',
    )
    status: Optional[Status2] = Field(
        None,
        description='The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>',
    )
    subType: Optional[SubType] = Field(
        None,
        description='The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    symbol: Optional[str] = Field(
        None,
        description='The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>',
    )
    transactionDate: Optional[str] = Field(
        None,
        description='The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>',
    )
    type: Optional[str] = Field(
        None,
        description='The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>',
    )
    valoren: Optional[str] = Field(
        None,
        description='It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.<br><br><b>Applicable containers</b>: investment<br>',
    )


class DerivedCategorySummaryDetails(BaseModel):
    creditTotal: Optional[Money] = None
    date: Optional[str] = Field(
        None,
        description='Date on which the credit and debit transactions had occured.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>',
    )
    debitTotal: Optional[Money] = None


class DerivedHolding(BaseModel):
    accountId: Optional[int] = Field(
        None,
        description='Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    accruedIncome: Optional[Money] = None
    accruedInterest: Optional[Money] = None
    assetClassification: Optional[AssetClassification] = None
    contractQuantity: Optional[float] = Field(
        None,
        description='The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>',
    )
    costBasis: Optional[Money] = None
    couponRate: Optional[float] = Field(
        None,
        description='The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    cusipNumber: Optional[str] = Field(
        None,
        description='The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>',
    )
    description: Optional[str] = Field(
        None,
        description='The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    enrichedDescription: Optional[str] = Field(
        None,
        description='The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    exercisedQuantity: Optional[float] = Field(
        None,
        description='The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>',
    )
    expirationDate: Optional[str] = Field(
        None,
        description='The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>',
    )
    grantDate: Optional[str] = Field(
        None,
        description='The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    holdingType: Optional[HoldingType] = Field(
        None,
        description='Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    interestRate: Optional[float] = Field(
        None,
        description='The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    isShort: Optional[bool] = Field(
        None,
        description='Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>',
    )
    isin: Optional[str] = Field(
        None,
        description='The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    matchStatus: Optional[str] = Field(
        None,
        description='Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>',
    )
    maturityDate: Optional[str] = Field(
        None,
        description='The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    optionType: Optional[OptionType] = Field(
        None,
        description='The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>',
    )
    price: Optional[Money] = None
    providerAccountId: Optional[int] = Field(
        None,
        description="Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>",
    )
    quantity: Optional[float] = Field(
        None,
        description='The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    securityStyle: Optional[str] = Field(
        None,
        description='Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    securityType: Optional[str] = Field(
        None,
        description='Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    sedol: Optional[str] = Field(
        None,
        description='The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>',
    )
    spread: Optional[Money] = None
    strikePrice: Optional[Money] = None
    symbol: Optional[str] = Field(
        None,
        description='The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>',
    )
    term: Optional[str] = Field(
        None,
        description='The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    unvestedQuantity: Optional[float] = Field(
        None,
        description='Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    unvestedValue: Optional[Money] = None
    value: Optional[Money] = None
    vestedQuantity: Optional[float] = Field(
        None,
        description='The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    vestedSharesExercisable: Optional[float] = Field(
        None,
        description='The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    vestedValue: Optional[Money] = None
    vestingDate: Optional[str] = Field(
        None,
        description='The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )


class DerivedHoldingsAccount(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The primary key of the account resource and the unique identifier for the account.<br>Required Feature Enablement: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    value: Optional[Money] = None


class DerivedHoldingsSummary(BaseModel):
    account: Optional[List[DerivedHoldingsAccount]] = Field(
        None,
        description='Accounts that contribute to the classification. <br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    classificationType: Optional[str] = Field(
        None,
        description='The classification type of the security. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    classificationValue: Optional[str] = Field(
        None,
        description='The classification value that corresponds to the classification type of the holding. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    holding: Optional[List[DerivedHolding]] = Field(
        None,
        description='Securities that belong to the asset classification type and contributed to the summary value.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    value: Optional[Money] = None


class DerivedNetworthHistoricalBalance(BaseModel):
    accountId: Optional[int] = None
    asOfDate: Optional[str] = Field(
        None,
        description='Date as of when the balance is last  updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>',
    )
    balance: Optional[Money] = None
    dataSourceType: Optional[DataSourceType] = Field(
        None,
        description='The source of balance information.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>',
    )
    date: Optional[str] = Field(
        None,
        description='Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance. AdditIonal Details: scraped: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates. carryForward : Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc. calculated: Balances that gets calculated for the days that are prior to the account added date.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>',
    )
    isAsset: Optional[bool] = Field(
        None,
        description='Indicates whether the balance is an asset or liability.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>',
    )


class FieldModel(BaseModel):
    id: Optional[constr(min_length=1, max_length=2147483647)] = Field(
        None,
        description='Identifier for the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    image: Optional[str] = Field(
        None,
        description='Image displayed at the endsite.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    isOptional: Optional[bool] = Field(
        None,
        description='Indicates if a field is an optional field or a mandatory field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    isValueProvided: Optional[bool] = Field(
        None,
        description='Indicates that the answer to the security question already exists in the Yodlee system.Persuading the user to provide the answer to the security question again during the edit-credential flow can be avoided.<br><br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=questions</li><li>GET providerAccounts/{providerAccountId}? include=questions</li></ul>',
    )
    maxLength: Optional[int] = Field(
        None,
        description='The maximum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    minLength: Optional[int] = Field(
        None,
        description='The minimum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    option: Optional[List[Option]] = Field(
        None,
        description='Provides the different values that are available for the user to choose. This field is applicable for drop-down or radio field types.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    prefix: Optional[str] = Field(
        None,
        description='The prefix string that has to be displayed before the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    suffix: Optional[str] = Field(
        None,
        description='The suffix string that has to be displayed next to the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    type: Optional[Type6] = Field(
        None,
        description='This indicates the display type of the field. For example, text box, image, etc. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>',
    )
    value: Optional[str] = Field(
        None,
        description='Value expected from the user for the field. This will be blank and is expected to be filled and sent back when submitting the login or MFA information.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    valueEditable: Optional[str] = Field(
        None,
        description='Indicates whether the field is editable or not.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )


class HistoricalBalance(BaseModel):
    asOfDate: Optional[str] = Field(
        None,
        description='Date as of when the balance is last updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>',
    )
    balance: Optional[Money] = None
    dataSourceType: Optional[DataSourceType] = Field(
        None,
        description='The source of balance information.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>',
    )
    date: Optional[str] = Field(
        None,
        description='Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance.<br><b>Additional Details</b>:<br><b>Scraped</b>: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates.<br><b>CarryForward</b>: Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc.<br><b>calculated</b>: Balances that gets calculated for the days that are prior to the account added date.  <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>',
    )
    isAsset: Optional[bool] = Field(
        None,
        description='Indicates whether the balance is an asset or liability.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>',
    )


class Holding(BaseModel):
    accountId: Optional[int] = Field(
        None,
        description='Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    accruedIncome: Optional[Money] = None
    accruedInterest: Optional[Money] = None
    assetClassification: Optional[List[AssetClassification]] = Field(
        None,
        description='Asset classification applied to the holding. <br><br><b>Applicable containers</b>: investment<br>',
    )
    contractQuantity: Optional[float] = Field(
        None,
        description='The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>',
    )
    costBasis: Optional[Money] = None
    couponRate: Optional[float] = Field(
        None,
        description='The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    cusipNumber: Optional[str] = Field(
        None,
        description='The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>',
    )
    description: Optional[str] = Field(
        None,
        description='The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    enrichedDescription: Optional[str] = Field(
        None,
        description='The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    exercisedQuantity: Optional[float] = Field(
        None,
        description='The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>',
    )
    expirationDate: Optional[str] = Field(
        None,
        description='The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>',
    )
    grantDate: Optional[str] = Field(
        None,
        description='The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    holdingType: Optional[HoldingType] = Field(
        None,
        description='Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    interestRate: Optional[float] = Field(
        None,
        description='The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    isShort: Optional[bool] = Field(
        None,
        description='Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>',
    )
    isin: Optional[str] = Field(
        None,
        description='The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    matchStatus: Optional[str] = Field(
        None,
        description='Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>',
    )
    maturityDate: Optional[str] = Field(
        None,
        description='The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    optionType: Optional[OptionType] = Field(
        None,
        description='The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>',
    )
    price: Optional[Money] = None
    providerAccountId: Optional[int] = Field(
        None,
        description="Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>",
    )
    quantity: Optional[float] = Field(
        None,
        description='The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    securityStyle: Optional[str] = Field(
        None,
        description='Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    securityType: Optional[str] = Field(
        None,
        description='Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    sedol: Optional[str] = Field(
        None,
        description='The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>',
    )
    spread: Optional[Money] = None
    strikePrice: Optional[Money] = None
    symbol: Optional[str] = Field(
        None,
        description='The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>',
    )
    term: Optional[str] = Field(
        None,
        description='The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>',
    )
    unvestedQuantity: Optional[float] = Field(
        None,
        description='Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    unvestedValue: Optional[Money] = None
    value: Optional[Money] = None
    vestedQuantity: Optional[float] = Field(
        None,
        description='The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    vestedSharesExercisable: Optional[float] = Field(
        None,
        description='The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )
    vestedValue: Optional[Money] = None
    vestingDate: Optional[str] = Field(
        None,
        description='The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>',
    )


class HoldingResponse(BaseModel):
    holding: Optional[List[Holding]] = None


class LoanPayoffDetails(BaseModel):
    outstandingBalance: Optional[Money] = None
    payByDate: Optional[str] = Field(
        None,
        description='The date by which the payoff amount should be paid.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    payoffAmount: Optional[Money] = None


class ProviderAccount(BaseModel):
    aggregationSource: Optional[AggregationSource] = Field(
        None,
        description='The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    consentId: Optional[int] = Field(
        None,
        description='Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    dataset: Optional[List[AccountDataset]] = Field(
        None,
        description='Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    isManual: Optional[bool] = Field(
        None,
        description='Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>',
    )
    oauthMigrationStatus: Optional[OauthMigrationStatus] = Field(
        None,
        description='Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    preferences: Optional[ProviderAccountPreferences] = None
    providerId: Optional[int] = Field(
        None,
        description='Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    requestId: Optional[str] = Field(
        None,
        description='Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    status: Optional[Status3] = Field(
        None,
        description='The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )


class ProviderAccountResponse(BaseModel):
    providerAccount: Optional[List[ProviderAccount]] = None


class ProvidersCount(BaseModel):
    TOTAL: Optional[TotalCount] = None


class ProvidersCountResponse(BaseModel):
    provider: Optional[ProvidersCount] = None


class Row(BaseModel):
    field: Optional[List[FieldModel]] = Field(
        None,
        description='Details of fields that belong to the row.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    fieldRowChoice: Optional[str] = Field(
        None,
        description='Fields that belong to a particular choice are collected together using this field.<br><b>Recommendations</b>: All the field row choices label to be grouped and displayed as options to the customer. On choosing a particular choice field, we recommend displaying the fields relevant to them. First field choice could be selected by default.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    form: Optional[str] = Field(
        None,
        description='Form denotes the set of the fields that are related. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier of the row.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    label: Optional[str] = Field(
        None,
        description='The label text displayed for a row in the form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )


class Security(BaseModel):
    accrualMethod: Optional[str] = Field(
        None,
        description='The method in which interest is accrued or earned.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    agencyFactor: Optional[float] = Field(
        None,
        description='Agency factor of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    callDate: Optional[str] = Field(
        None,
        description='Next call date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    callPrice: Optional[float] = Field(
        None,
        description='Next call price of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    cdscFundFlag: Optional[bool] = Field(
        None,
        description='cdsc fund flag of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    closedFlag: Optional[bool] = Field(
        None,
        description='<b>true</b>:Closed for all investors , <b>false</b>: Open to all investors.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    cusip: Optional[str] = Field(
        None,
        description='A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    description: Optional[str] = Field(
        None,
        description='The description (name) of the security. For example, Cisco Systems.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    federalTaxable: Optional[bool] = Field(
        None,
        description='Flag indicating federal taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    firmEligible: Optional[str] = Field(
        None,
        description='<b>1</b>- indicates Eligible,<b>0</b>- indicates firm is not eligible.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    firstCouponDate: Optional[str] = Field(
        None,
        description='First coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    frequency: Optional[int] = Field(
        None,
        description='Coupon Frequency.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    fundFamily: Optional[str] = Field(
        None,
        description='Mutual Fund Family Name.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    gicsSector: Optional[str] = Field(
        None,
        description='GICS Sector is a categorization the S&P assigns to all publically traded companies. <br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    id: Optional[int] = Field(
        None,
        description='The unique identifier of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    incomeCurrency: Optional[str] = Field(
        None,
        description='ISO 4217 currency code indicating income currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    interestRate: Optional[float] = Field(
        None,
        description="The rate of interest paid annually, expressed as a percentage of the bond's par or face value.<br><br><b>Applicable containers</b>: investment, insurance<br>",
    )
    isDummySecurity: Optional[bool] = Field(
        None,
        description='Indicates whether the security is a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    isEnvestnetDummySecurity: Optional[bool] = Field(
        None,
        description='Flag indicating a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    isSyntheticSecurity: Optional[bool] = Field(
        None,
        description='Indicates whether the security is a simulated security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    isin: Optional[str] = Field(
        None,
        description='The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    issueDate: Optional[str] = Field(
        None,
        description='Issue date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    issueTypeMultiplier: Optional[float] = Field(
        None,
        description='Price units corresponding to the security style. This is used to derive actual price of the security from market value.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    lastCouponDate: Optional[str] = Field(
        None,
        description='Last coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    lastModifiedDate: Optional[str] = Field(
        None,
        description='The last updated date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    maturityDate: Optional[str] = Field(
        None,
        description='Maturity date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    minimumPurchase: Optional[int] = Field(
        None,
        description='Minimum purchase of security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    moodyRating: Optional[str] = Field(
        None,
        description='Unique identifier for Moody rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    sAndPRating: Optional[str] = Field(
        None,
        description='Unique identifier for S&P rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    sector: Optional[str] = Field(
        None,
        description='Identifier of the sector to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    sedol: Optional[str] = Field(
        None,
        description='The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    shareClass: Optional[str] = Field(
        None,
        description='Share class of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    stateTaxable: Optional[bool] = Field(
        None,
        description='The state in which the security is taxed.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    stockExchangeDetails: Optional[List[StockExchangeDetail]] = Field(
        None,
        description='Securities exchange provide the securities information at the corresponding exchanges. <br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    style: Optional[str] = Field(
        None,
        description='Classification of the style for the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    subSector: Optional[str] = Field(
        None,
        description='GICS sector ID to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    tradeCurrencyCode: Optional[str] = Field(
        None,
        description='ISO 4217 currency code indicating trading currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>',
    )
    type: Optional[str] = Field(
        None,
        description='Indicates the type of security like stocks, mutual fund, etc. <br><br><b>Applicable containers</b>: investment, insurance<br>',
    )


class SecurityHolding(BaseModel):
    id: Optional[str] = None
    security: Optional[Security] = None


class TransactionCount(BaseModel):
    TOTAL: Optional[TransactionTotal] = None


class TransactionCountResponse(BaseModel):
    transaction: Optional[TransactionCount] = None


class TransactionRequest(BaseModel):
    transaction: UpdateTransaction


class UpdateUserRegistration(BaseModel):
    address: Optional[UserAddress] = None
    email: Optional[str] = None
    name: Optional[NameModel] = None
    preferences: Optional[UserRequestPreferences] = None
    segmentName: Optional[str] = None


class UpdateUserRequest(BaseModel):
    user: UpdateUserRegistration


class User(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>',
    )
    loginName: Optional[str] = Field(
        None,
        description='The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>',
    )
    name: Optional[NameModel] = None
    preferences: Optional[UserResponsePreferences] = None
    roleType: Optional[RoleType] = None
    session: Optional[UserSession] = None


class UserDetail(BaseModel):
    address: Optional[UserAddress] = None
    email: Optional[str] = Field(
        None,
        description='The email address of the user.<br><br><b>Endpoints</b>:<ul><li>GET user</li></ul>',
    )
    id: Optional[int] = Field(
        None,
        description='The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>',
    )
    loginName: Optional[str] = Field(
        None,
        description='The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>',
    )
    name: Optional[NameModel] = None
    preferences: Optional[UserResponsePreferences] = None
    roleType: Optional[RoleType] = None
    segmentName: Optional[str] = None


class UserDetailResponse(BaseModel):
    user: Optional[UserDetail] = None


class UserRegistration(BaseModel):
    address: Optional[UserAddress] = None
    email: Optional[str] = None
    loginName: constr(min_length=3, max_length=150)
    name: Optional[NameModel] = None
    preferences: Optional[UserRequestPreferences] = None
    segmentName: Optional[str] = None


class UserRequest(BaseModel):
    user: UserRegistration


class UserResponse(BaseModel):
    user: Optional[User] = None


class VerificationAccount(BaseModel):
    accountName: Optional[str] = None
    accountNumber: constr(min_length=3, max_length=17)
    accountType: AccountType
    bankTransferCode: VerificationBankTransferCode


class VerificationStatus2(BaseModel):
    account: Optional[VerificationAccount] = None
    accountId: Optional[int] = Field(
        None,
        description='Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    providerAccountId: Optional[int] = Field(
        None,
        description='Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    reason: Optional[Reason] = Field(
        None,
        description='The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    remainingAttempts: Optional[int] = None
    verificationDate: Optional[str] = Field(
        None,
        description='The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    verificationId: Optional[int] = Field(
        None,
        description='Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    verificationStatus: Optional[VerificationStatus] = Field(
        None,
        description='The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>',
    )
    verificationType: Optional[VerificationType] = Field(
        None,
        description='The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>',
    )


class VerificationStatusResponse(BaseModel):
    verification: Optional[List[VerificationStatus2]] = None


class VerifiedAccount(BaseModel):
    accountNumber: Optional[str] = Field(
        None,
        description='The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li></ul>',
    )
    accountType: Optional[str] = Field(
        None,
        description='The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br></ul>',
    )
    bankTransferCode: Optional[List[BankTransferCode]] = Field(
        None,
        description='Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul></ul>',
    )
    fullAccountNumber: Optional[str] = None
    holder: Optional[List[AccountHolder]] = None
    id: Optional[int] = None
    providerAccountId: Optional[int] = Field(
        None,
        description='The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br>',
    )
    providerName: Optional[str] = Field(
        None,
        description='<b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities<br>',
    )


class VerifyAccount(BaseModel):
    account: Optional[List[VerifiedAccount]] = None
    transactionCriteria: Optional[List[VerifyTransactionCriteria]] = None


class VerifyAccountRequest(BaseModel):
    accountId: Optional[int] = None
    container: Optional[Container] = None
    transactionCriteria: List[VerifyTransactionCriteria]


class VerifyAccountResponse(BaseModel):
    verifyAccount: Optional[VerifyAccount] = None


class AccountHistory(BaseModel):
    historicalBalances: Optional[List[HistoricalBalance]] = None
    id: Optional[int] = None


class Attribute(BaseModel):
    container: Optional[List[ContainerEnum]] = Field(
        None,
        description='Containers for which the attributes are supported.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>',
    )
    containerAttributes: Optional[ContainerAttributes] = None
    fromDate: Optional[str] = Field(
        None,
        description='Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>',
    )
    fromFinYear: Optional[str] = Field(
        None,
        description='Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>',
    )
    name: Optional[Name1] = Field(
        None,
        description='Attributes that are supported for a dataset.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>',
    )
    toDate: Optional[str] = Field(
        None,
        description='Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>',
    )
    toFinYear: Optional[str] = Field(
        None,
        description='Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>',
    )


class Coverage(BaseModel):
    amount: Optional[List[CoverageAmount]] = Field(
        None,
        description='The coverage amount-related details.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    endDate: Optional[str] = Field(
        None,
        description='The date on which the coverage for the account ends or expires.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    planType: Optional[PlanType] = Field(
        None,
        description='The plan type for an insurance provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>',
    )
    startDate: Optional[str] = Field(
        None,
        description='The date on which the coverage for the account starts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    type: Optional[Type2] = Field(
        None,
        description='The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>',
    )


class DataExtractsAccount(BaseModel):
    field_401kLoan: Optional[Money] = Field(None, alias='401kLoan')
    CONTAINER_1: Optional[CONTAINER] = Field(
        None,
        alias='CONTAINER',
        description='The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    accountName: Optional[str] = Field(
        None,
        description='The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    accountNumber: Optional[str] = Field(
        None,
        description='The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>',
    )
    accountStatus: Optional[AccountStatus] = Field(
        None,
        description='The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made "ACTIVE" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    accountType: Optional[str] = Field(
        None,
        description='The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    address: Optional[AccountAddress] = None
    aggregationSource: Optional[AggregationSource] = Field(
        None,
        description='The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    amountDue: Optional[Money] = None
    annualPercentageYield: Optional[float] = Field(
        None,
        description='Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    annuityBalance: Optional[Money] = None
    apr: Optional[float] = Field(
        None,
        description='The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    associatedProviderAccountId: Optional[List[int]] = Field(
        None,
        description='The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    availableBalance: Optional[Money] = None
    availableCash: Optional[Money] = None
    availableCredit: Optional[Money] = None
    balance: Optional[Money] = None
    bankTransferCode: Optional[List[BankTransferCode]] = Field(
        None,
        description='Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    cash: Optional[Money] = None
    cashApr: Optional[float] = Field(
        None,
        description='Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    cashValue: Optional[Money] = None
    classification: Optional[Classification] = Field(
        None,
        description='The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    collateral: Optional[str] = Field(
        None,
        description='Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    coverage: Optional[List[Coverage]] = Field(
        None,
        description='The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    currentBalance: Optional[Money] = None
    currentLevel: Optional[str] = Field(
        None,
        description='Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    dataset: Optional[List[AccountDataset]] = Field(
        None,
        description='Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    deathBenefit: Optional[Money] = None
    derivedApr: Optional[float] = Field(
        None,
        description='Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    displayedName: Optional[str] = Field(
        None,
        description='The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    dueDate: Optional[str] = Field(
        None,
        description='The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    enrollmentDate: Optional[str] = Field(
        None,
        description='Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    escrowBalance: Optional[Money] = None
    estimatedDate: Optional[str] = Field(
        None,
        description='The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    expirationDate: Optional[str] = Field(
        None,
        description='The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    faceAmount: Optional[Money] = None
    frequency: Optional[Frequency] = Field(
        None,
        description='The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>:  creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    guarantor: Optional[str] = Field(
        None,
        description='A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    homeInsuranceType: Optional[HomeInsuranceType] = Field(
        None,
        description='Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    homeValue: Optional[Money] = None
    id: Optional[int] = Field(
        None,
        description='The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>',
    )
    includeInNetWorth: Optional[bool] = Field(
        None,
        description='Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    interestPaidLastYear: Optional[Money] = None
    interestPaidYTD: Optional[Money] = None
    interestRate: Optional[float] = Field(
        None,
        description='<br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    interestRateType: Optional[InterestRateType] = Field(
        None,
        description='The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    isAsset: Optional[bool] = Field(
        None,
        description='The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    isDeleted: Optional[bool] = Field(
        None,
        description='Indicates if the account is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>',
    )
    isManual: Optional[bool] = Field(
        None,
        description='Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastEmployeeContributionAmount: Optional[Money] = None
    lastEmployeeContributionDate: Optional[str] = Field(
        None,
        description='The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastPayment: Optional[Money] = None
    lastPaymentAmount: Optional[Money] = None
    lastPaymentDate: Optional[str] = Field(
        None,
        description='The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lender: Optional[str] = Field(
        None,
        description='The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lifeInsuranceType: Optional[LifeInsuranceType] = Field(
        None,
        description='Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    loanPayByDate: Optional[str] = Field(
        None,
        description='The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    loanPayoffAmount: Optional[Money] = None
    loanPayoffDetails: Optional[LoanPayoffDetails] = None
    marginBalance: Optional[Money] = None
    maturityAmount: Optional[Money] = None
    maturityDate: Optional[str] = Field(
        None,
        description='The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    memo: Optional[str] = Field(
        None,
        description='The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    minimumAmountDue: Optional[Money] = None
    moneyMarketBalance: Optional[Money] = None
    nextLevel: Optional[str] = Field(
        None,
        description='The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    nickname: Optional[str] = Field(
        None,
        description='The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    oauthMigrationStatus: Optional[OauthMigrationStatus] = Field(
        None,
        description='Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    originalLoanAmount: Optional[Money] = None
    originationDate: Optional[str] = Field(
        None,
        description='The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    overDraftLimit: Optional[Money] = None
    policyEffectiveDate: Optional[str] = Field(
        None,
        description='The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    policyFromDate: Optional[str] = Field(
        None,
        description='The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    policyStatus: Optional[PolicyStatus] = Field(
        None,
        description='The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    policyTerm: Optional[str] = Field(
        None,
        description='The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    policyToDate: Optional[str] = Field(
        None,
        description='The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    premium: Optional[Money] = None
    premiumPaymentTerm: Optional[str] = Field(
        None,
        description='The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    primaryRewardUnit: Optional[str] = Field(
        None,
        description='Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    principalBalance: Optional[Money] = None
    providerAccountId: Optional[int] = Field(
        None,
        description='The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    providerId: Optional[str] = Field(
        None,
        description='Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    providerName: Optional[str] = Field(
        None,
        description='Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    recurringPayment: Optional[Money] = None
    remainingBalance: Optional[Money] = None
    repaymentPlanType: Optional[RepaymentPlanType] = Field(
        None,
        description='The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>',
    )
    rewardBalance: Optional[List[RewardBalance]] = Field(
        None,
        description='Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    runningBalance: Optional[Money] = None
    shortBalance: Optional[Money] = None
    sourceAccountStatus: Optional[SourceAccountStatus] = Field(
        None,
        description='Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>',
    )
    sourceId: Optional[str] = Field(
        None,
        description='A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    term: Optional[str] = Field(
        None,
        description='The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    totalCashLimit: Optional[Money] = None
    totalCreditLimit: Optional[Money] = None
    totalCreditLine: Optional[Money] = None
    totalUnvestedBalance: Optional[Money] = None
    totalVestedBalance: Optional[Money] = None
    userClassification: Optional[UserClassification] = Field(
        None,
        description='<b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>',
    )
    valuationType: Optional[ValuationType] = Field(
        None,
        description='The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )


class DataExtractsEventData(BaseModel):
    fromDate: Optional[str] = None
    toDate: Optional[str] = None
    userCount: Optional[int] = None
    userData: Optional[List[DataExtractsEventUserData]] = None


class DataExtractsUserData(BaseModel):
    account: Optional[List[DataExtractsAccount]] = None
    holding: Optional[List[DataExtractsHolding]] = None
    providerAccount: Optional[List[DataExtractsProviderAccount]] = None
    totalTransactionsCount: Optional[int] = None
    transaction: Optional[List[DataExtractsTransaction]] = None
    user: Optional[DataExtractsUser] = None


class DataExtractsUserDataResponse(BaseModel):
    userData: Optional[List[DataExtractsUserData]] = None


class DerivedCategorySummary(BaseModel):
    categoryId: Optional[int] = Field(
        None,
        description='Id of the category. This information is provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>',
    )
    categoryName: Optional[str] = Field(
        None,
        description='The name of the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>',
    )
    creditTotal: Optional[Money] = None
    debitTotal: Optional[Money] = None
    details: Optional[List[DerivedCategorySummaryDetails]] = Field(
        None,
        description='Credit and debit summary per date.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>',
    )
    links: Optional[DerivedTransactionsLinks] = None


class DerivedHoldingSummaryResponse(BaseModel):
    holdingSummary: Optional[List[DerivedHoldingsSummary]] = None
    link: Optional[DerivedHoldingsLinks] = None


class DerivedNetworth(BaseModel):
    asset: Optional[Money] = None
    date: Optional[str] = Field(
        None,
        description='The date as of when the networth information is provided.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>',
    )
    historicalBalances: Optional[List[DerivedNetworthHistoricalBalance]] = Field(
        None,
        description='Balances of the accounts over the period of time.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>',
    )
    liability: Optional[Money] = None
    networth: Optional[Money] = None


class DerivedNetworthResponse(BaseModel):
    networth: Optional[List[DerivedNetworth]] = None


class DerivedTransactionsSummary(BaseModel):
    categorySummary: Optional[List[DerivedCategorySummary]] = Field(
        None,
        description='Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>',
    )
    categoryType: Optional[CategoryType] = Field(
        None,
        description='Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>',
    )
    creditTotal: Optional[Money] = None
    debitTotal: Optional[Money] = None
    links: Optional[DerivedTransactionsLinks] = None


class HoldingSecuritiesResponse(BaseModel):
    holding: Optional[List[SecurityHolding]] = None


class LoginForm(BaseModel):
    forgetPasswordURL: Optional[str] = Field(
        None,
        description='The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    formType: Optional[FormType] = Field(
        None,
        description='The type of the forms for which the user information is required.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>',
    )
    help: Optional[str] = Field(
        None,
        description='The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    id: Optional[int] = Field(
        None,
        description='The identifier of the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    loginHelp: Optional[str] = Field(
        None,
        description='The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    mfaInfoText: Optional[str] = Field(
        None,
        description="The text displayed in the provider site while requesting the user's MFA information. This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>",
    )
    mfaInfoTitle: Optional[str] = Field(
        None,
        description='The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    mfaTimeout: Optional[int] = Field(
        None,
        description='The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )
    row: Optional[List[Row]] = Field(
        None,
        description='This indicates one row in the form. The row will have one label. But it may have single or multiple fields.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>',
    )


class ProviderAccountDetail(BaseModel):
    aggregationSource: Optional[AggregationSource] = Field(
        None,
        description='The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    consentId: int = Field(
        ...,
        description='Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    dataset: Optional[List[AccountDataset]] = Field(
        None,
        description='Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    isManual: Optional[bool] = Field(
        None,
        description='Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>',
    )
    loginForm: Optional[List[LoginForm]] = Field(
        None,
        description='This entity gets returned in the response for only MFA based provider accounts during the add/update account polling process. This indicates that the MFA information is expected from the user to complete the process. This represents the structure of MFA form that is displayed to the user in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    oauthMigrationStatus: Optional[OauthMigrationStatus] = Field(
        None,
        description='Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    preferences: Optional[ProviderAccountPreferences] = None
    providerId: Optional[int] = Field(
        None,
        description='Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    requestId: Optional[str] = Field(
        None,
        description='Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    status: Optional[Status3] = Field(
        None,
        description='The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )


class ProviderAccountDetailResponse(BaseModel):
    providerAccount: Optional[List[ProviderAccountDetail]] = None


class ProvidersDataset(BaseModel):
    attribute: Optional[List[Attribute]] = Field(
        None,
        description='The name of the dataset attribute suported by the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    name: Optional[Name4] = Field(
        None,
        description='The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>',
    )


class UpdateVerification(BaseModel):
    account: Optional[VerificationAccount] = None
    accountId: Optional[int] = Field(
        None,
        description='Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    providerAccountId: Optional[int] = Field(
        None,
        description='Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    reason: Optional[Reason] = Field(
        None,
        description='The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    transaction: List[VerificationTransaction]
    verificationDate: Optional[str] = Field(
        None,
        description='The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    verificationId: Optional[int] = Field(
        None,
        description='Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    verificationStatus: Optional[VerificationStatus] = Field(
        None,
        description='The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>',
    )
    verificationType: Optional[VerificationType] = Field(
        None,
        description='The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>',
    )


class UpdateVerificationRequest(BaseModel):
    verification: Optional[UpdateVerification] = None


class UpdatedProviderAccount(BaseModel):
    aggregationSource: Optional[AggregationSource] = Field(
        None,
        description='The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    dataset: Optional[List[AccountDataset]] = Field(
        None,
        description='Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    isManual: Optional[bool] = Field(
        None,
        description='Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>',
    )
    loginForm: Optional[List[LoginForm]] = Field(
        None,
        description='This entity gets returned in the response for only MFA based provider accounts during the add/update account polling process. This indicates that the MFA information is expected from the user to complete the process. This represents the structure of MFA form that is displayed to the user in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    oauthMigrationStatus: Optional[OauthMigrationStatus] = Field(
        None,
        description='Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    providerId: Optional[int] = Field(
        None,
        description='Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    requestId: Optional[str] = Field(
        None,
        description='Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>',
    )
    status: Optional[Status8] = Field(
        None,
        description='The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )


class UpdatedProviderAccountResponse(BaseModel):
    providerAccount: Optional[List[UpdatedProviderAccount]] = None


class Verification(BaseModel):
    account: Optional[VerificationAccount] = None
    accountId: Optional[int] = Field(
        None,
        description='Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    providerAccountId: Optional[int] = Field(
        None,
        description='Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    reason: Optional[Reason] = Field(
        None,
        description='The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    verificationDate: Optional[str] = Field(
        None,
        description='The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    verificationId: Optional[int] = Field(
        None,
        description='Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>',
    )
    verificationStatus: Optional[VerificationStatus] = Field(
        None,
        description='The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>',
    )
    verificationType: Optional[VerificationType] = Field(
        None,
        description='The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>',
    )


class VerificationRequest(BaseModel):
    verification: Verification


class VerificationResponse(BaseModel):
    verification: Optional[List[Verification]] = None


class Account(BaseModel):
    field_401kLoan: Optional[Money] = Field(None, alias='401kLoan')
    CONTAINER_1: Optional[CONTAINER] = Field(
        None,
        alias='CONTAINER',
        description='The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    accountName: Optional[str] = Field(
        None,
        description='The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    accountNumber: Optional[str] = Field(
        None,
        description='The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>',
    )
    accountStatus: Optional[AccountStatus] = Field(
        None,
        description='The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made "ACTIVE" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    accountType: Optional[str] = Field(
        None,
        description='The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    address: Optional[AccountAddress] = None
    aggregationSource: Optional[AggregationSource] = Field(
        None,
        description='The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    amountDue: Optional[Money] = None
    annualPercentageYield: Optional[float] = Field(
        None,
        description='Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    annuityBalance: Optional[Money] = None
    apr: Optional[float] = Field(
        None,
        description='The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    associatedProviderAccountId: Optional[List[int]] = Field(
        None,
        description='The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    autoRefresh: Optional[AutoRefresh] = None
    availableBalance: Optional[Money] = None
    availableCash: Optional[Money] = None
    availableCredit: Optional[Money] = None
    balance: Optional[Money] = None
    bankTransferCode: Optional[List[BankTransferCode]] = Field(
        None,
        description='Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    cash: Optional[Money] = None
    cashApr: Optional[float] = Field(
        None,
        description='Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    cashValue: Optional[Money] = None
    classification: Optional[Classification] = Field(
        None,
        description='The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    collateral: Optional[str] = Field(
        None,
        description='Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    coverage: Optional[List[Coverage]] = Field(
        None,
        description='The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    createdDate: Optional[str] = Field(
        None,
        description='The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    currentBalance: Optional[Money] = None
    currentLevel: Optional[str] = Field(
        None,
        description='Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    dataset: Optional[List[AccountDataset]] = Field(
        None,
        description='Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    deathBenefit: Optional[Money] = None
    derivedApr: Optional[float] = Field(
        None,
        description='Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    displayedName: Optional[str] = Field(
        None,
        description='The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    dueDate: Optional[str] = Field(
        None,
        description='The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    enrollmentDate: Optional[str] = Field(
        None,
        description='Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    escrowBalance: Optional[Money] = None
    estimatedDate: Optional[str] = Field(
        None,
        description='The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    expirationDate: Optional[str] = Field(
        None,
        description='The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    faceAmount: Optional[Money] = None
    frequency: Optional[Frequency] = Field(
        None,
        description='The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>:  creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    fullAccountNumber: Optional[str] = Field(
        None,
        description='Full account number of the account that is included only when include = fullAccountNumber is provided in the request. For student loan account the account number that will be used for ACH or fund transfer<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward,  otherAssets, otherLiabilities <br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><b> Note : </b> fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</ul>',
    )
    fullAccountNumberList: Optional[FullAccountNumberList] = None
    guarantor: Optional[str] = Field(
        None,
        description='A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    holder: Optional[List[AccountHolder]] = Field(
        None,
        description='Holder details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>',
    )
    homeInsuranceType: Optional[HomeInsuranceType] = Field(
        None,
        description='Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    homeValue: Optional[Money] = None
    id: Optional[int] = Field(
        None,
        description='The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>',
    )
    includeInNetWorth: Optional[bool] = Field(
        None,
        description='Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    interestPaidLastYear: Optional[Money] = None
    interestPaidYTD: Optional[Money] = None
    interestRate: Optional[float] = Field(
        None,
        description='<br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    interestRateType: Optional[InterestRateType] = Field(
        None,
        description='The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    isAsset: Optional[bool] = Field(
        None,
        description='The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    isManual: Optional[bool] = Field(
        None,
        description='Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastEmployeeContributionAmount: Optional[Money] = None
    lastEmployeeContributionDate: Optional[str] = Field(
        None,
        description='The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastPayment: Optional[Money] = None
    lastPaymentAmount: Optional[Money] = None
    lastPaymentDate: Optional[str] = Field(
        None,
        description='The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lastUpdated: Optional[str] = Field(
        None,
        description='The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lender: Optional[str] = Field(
        None,
        description='The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    lifeInsuranceType: Optional[LifeInsuranceType] = Field(
        None,
        description='Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    loanPayByDate: Optional[str] = Field(
        None,
        description='The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    loanPayoffAmount: Optional[Money] = None
    loanPayoffDetails: Optional[LoanPayoffDetails] = None
    marginBalance: Optional[Money] = None
    maturityAmount: Optional[Money] = None
    maturityDate: Optional[str] = Field(
        None,
        description='The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    memo: Optional[str] = Field(
        None,
        description='The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    minimumAmountDue: Optional[Money] = None
    moneyMarketBalance: Optional[Money] = None
    nextLevel: Optional[str] = Field(
        None,
        description='The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    nickname: Optional[str] = Field(
        None,
        description='The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    oauthMigrationStatus: Optional[OauthMigrationStatus] = Field(
        None,
        description='Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    originalLoanAmount: Optional[Money] = None
    originationDate: Optional[str] = Field(
        None,
        description='The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    overDraftLimit: Optional[Money] = None
    paymentProfile: Optional[PaymentProfile] = None
    policyEffectiveDate: Optional[str] = Field(
        None,
        description='The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    policyFromDate: Optional[str] = Field(
        None,
        description='The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    policyStatus: Optional[PolicyStatus] = Field(
        None,
        description='The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )
    policyTerm: Optional[str] = Field(
        None,
        description='The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    policyToDate: Optional[str] = Field(
        None,
        description='The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    premium: Optional[Money] = None
    premiumPaymentTerm: Optional[str] = Field(
        None,
        description='The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    primaryRewardUnit: Optional[str] = Field(
        None,
        description='Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    principalBalance: Optional[Money] = None
    profile: Optional[AccountProfile] = None
    providerAccountId: Optional[int] = Field(
        None,
        description='The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    providerId: Optional[str] = Field(
        None,
        description='Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    providerName: Optional[str] = Field(
        None,
        description='Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    recurringPayment: Optional[Money] = None
    remainingBalance: Optional[Money] = None
    repaymentPlanType: Optional[RepaymentPlanType] = Field(
        None,
        description='The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>',
    )
    rewardBalance: Optional[List[RewardBalance]] = Field(
        None,
        description='Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    runningBalance: Optional[Money] = None
    shortBalance: Optional[Money] = None
    sourceAccountStatus: Optional[SourceAccountStatus] = Field(
        None,
        description='Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>',
    )
    sourceId: Optional[str] = Field(
        None,
        description='A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    term: Optional[str] = Field(
        None,
        description='The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>',
    )
    totalCashLimit: Optional[Money] = None
    totalCreditLimit: Optional[Money] = None
    totalCreditLine: Optional[Money] = None
    totalUnvestedBalance: Optional[Money] = None
    totalVestedBalance: Optional[Money] = None
    userClassification: Optional[UserClassification] = Field(
        None,
        description='<b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>',
    )
    valuationType: Optional[ValuationType] = Field(
        None,
        description='The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>',
    )


class AccountHistoricalBalancesResponse(BaseModel):
    account: Optional[List[AccountHistory]] = None


class AccountResponse(BaseModel):
    account: Optional[List[Account]] = None


class DataExtractsEvent(BaseModel):
    data: Optional[DataExtractsEventData] = None
    info: Optional[str] = None


class DataExtractsEventResponse(BaseModel):
    event: Optional[DataExtractsEvent] = None


class DerivedTransactionSummaryResponse(BaseModel):
    links: Optional[DerivedTransactionsLinks] = None
    transactionSummary: Optional[List[DerivedTransactionsSummary]] = None


class ProviderAccountRequest(BaseModel):
    aggregationSource: Optional[AggregationSource] = None
    consentId: Optional[int] = Field(
        None,
        description='Consent Id generated for the request through POST Consent.<br><br><b>Endpoints</b>:<ul><li>POST Provider Account</li><li>PUT Provider Account</li></ul>',
    )
    dataset: Optional[List[ProvidersDataset]] = None
    datasetName: Optional[List[DatasetNameEnum]] = None
    field: List[FieldModel]
    preferences: Optional[ProviderAccountPreferences] = None


class ProviderDetail(BaseModel):
    PRIORITY_1: Optional[PRIORITY] = Field(
        None,
        alias='PRIORITY',
        description='Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>',
    )
    accountType: Optional[List[AccountTypeEnum]] = Field(
        None,
        description='AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    associatedProviderIds: Optional[List[int]] = Field(
        None,
        description='The screen-scraping providers that are associated to the Open Banking provider ID.<br><br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>',
    )
    authParameter: Optional[List[AuthParameterEnum]] = Field(
        None,
        description='AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    authType: Optional[AuthType] = Field(
        None,
        description='The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>',
    )
    baseUrl: Optional[str] = Field(
        None,
        description="The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>",
    )
    capability: Optional[List[Capability]] = Field(
        None,
        description='Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><br><b>Note : </b> capability has been deprecated',
    )
    countryISOCode: Optional[str] = Field(
        None,
        description='Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    dataset: Optional[List[ProvidersDataset]] = Field(
        None,
        description='Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    favicon: Optional[str] = Field(
        None,
        description='Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    help: Optional[str] = Field(
        None,
        description='Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    isAddedByUser: Optional[str] = Field(
        None,
        description='Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    isAutoRefreshEnabled: Optional[bool] = Field(
        None,
        description='Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    isConsentRequired: Optional[bool] = Field(
        None,
        description='Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    languageISOCode: Optional[str] = Field(
        None,
        description="The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>",
    )
    lastModified: Optional[str] = Field(
        None,
        description='Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    loginForm: Optional[List[LoginForm]] = Field(
        None,
        description='This entity represents the structure of the login or MFA form that is displayed to the user at the provider site. For performance reasons, this field is returned only when a single provider is requested in the request.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li></ul>',
    )
    loginUrl: Optional[str] = Field(
        None,
        description="The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>",
    )
    logo: Optional[str] = Field(
        None,
        description='The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    name: Optional[str] = Field(
        None,
        description='The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    primaryLanguageISOCode: Optional[str] = Field(
        None,
        description='The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    status: Optional[Status5] = Field(
        None,
        description='Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )


class ProviderDetailResponse(BaseModel):
    provider: Optional[List[ProviderDetail]] = None


class Providers(BaseModel):
    PRIORITY_1: Optional[PRIORITY] = Field(
        None,
        alias='PRIORITY',
        description='Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>',
    )
    accountType: Optional[List[AccountTypeEnum]] = Field(
        None,
        description='AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    associatedProviderIds: Optional[List[int]] = Field(
        None,
        description='The screen-scraping providers that are associated to the Open Banking provider ID.<br><br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>',
    )
    authParameter: Optional[List[AuthParameterEnum]] = Field(
        None,
        description='AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    authType: Optional[AuthType] = Field(
        None,
        description='The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>',
    )
    baseUrl: Optional[str] = Field(
        None,
        description="The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>",
    )
    capability: Optional[List[Capability]] = Field(
        None,
        description='Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><br><b>Note : </b> capability has been deprecated',
    )
    countryISOCode: Optional[str] = Field(
        None,
        description='Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    dataset: Optional[List[ProvidersDataset]] = Field(
        None,
        description='Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    favicon: Optional[str] = Field(
        None,
        description='Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    forgetPasswordUrl: Optional[str] = Field(
        None,
        description='The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>',
    )
    help: Optional[str] = Field(
        None,
        description='Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    id: Optional[int] = Field(
        None,
        description='Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    isAddedByUser: Optional[str] = Field(
        None,
        description='Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    isAutoRefreshEnabled: Optional[bool] = Field(
        None,
        description='Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    isConsentRequired: Optional[bool] = Field(
        None,
        description='Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    languageISOCode: Optional[str] = Field(
        None,
        description="The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>",
    )
    lastModified: Optional[str] = Field(
        None,
        description='Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    loginHelp: Optional[str] = Field(
        None,
        description='Help text to guide the user to choose the correct provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>',
    )
    loginUrl: Optional[str] = Field(
        None,
        description="The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>",
    )
    logo: Optional[str] = Field(
        None,
        description='The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    name: Optional[str] = Field(
        None,
        description='The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    primaryLanguageISOCode: Optional[str] = Field(
        None,
        description='The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )
    status: Optional[Status5] = Field(
        None,
        description='Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>',
    )


class ProviderResponse(BaseModel):
    provider: Optional[List[Providers]] = None
